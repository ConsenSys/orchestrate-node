syntax = "proto3";

import "types/abi/abi.proto";
import "types/common/account_instance.proto";

option go_package = "gitlab.com/ConsenSys/client/fr/core-stack/pkg.git/types/contract-registry";

package contractregistry;

// Registry is a GRPC service responsible for registering Contracts
service Registry {
    // Register a contract
    rpc RegisterContract(RegisterContractRequest) returns (RegisterContractResponse);
    // Retrieve contract ABI
    rpc GetContractABI (GetContractRequest) returns (GetContractABIResponse);
    // Returns the bytecode
    rpc GetContractBytecode (GetContractRequest) returns (GetContractBytecodeResponse);
    // Returns the deployed bytecode
    rpc GetContractDeployedBytecode (GetContractRequest) returns (GetContractDeployedBytecodeResponse);

    // Retrieve methods using 4 bytes unique selector
    rpc GetMethodsBySelector (GetMethodsBySelectorRequest) returns (GetMethodsBySelectorResponse);
    // Retrieve events using hash of signature
    rpc GetEventsBySigHash (GetEventsBySigHashRequest) returns (GetEventsBySigHashResponse);

    // Request an update of the codehash of the contract address
    rpc RequestAddressUpdate(AddressUpdateRequest) returns (AddressUpdateResponse);
}

message RegisterContractRequest {
    // Contract to register
    abi.Contract contract = 1;
}

message RegisterContractResponse {
}

message GetContractRequest {
    abi.Contract contract = 1;
}

message GetContractABIResponse {
    bytes abi = 1;
}

message GetContractBytecodeResponse {
    bytes bytecode = 1;
}

message GetContractDeployedBytecodeResponse {
    bytes deployedBytecode = 1;
}

message GetMethodsBySelectorRequest {
    // Method selector
    bytes selector = 1;
    
    // Chain & Address of the contract
    common.AccountInstance accountInstance = 2;
}

message GetMethodsBySelectorResponse {
    // Contains the ABI of the exact method if the deployed contract has a known bytecode
    bytes method = 1;
    // Contains the ABIs of the potential methods(s) if the deployed contract is not known 
    repeated bytes defaultMethods = 2;
}

message GetEventsBySigHashRequest {
    // Event signature hash (aka: topic[0])
    bytes sigHash = 1;

    // Chain & Address of the contract
    common.AccountInstance accountInstance = 2;

    // Count of indexed inputs in event abi
    uint32 indexedInputCount = 3;
}

message GetEventsBySigHashResponse {
    // Contains the ABI of the exact event if the deployed contract has a known bytecode
    bytes event = 1;
    // Contains the ABIs of the potential event(s) if the deployed contract is not known 
    repeated bytes defaultEvents = 2;
}

message AddressUpdateRequest {
    // Chain & address of the account to update
    common.AccountInstance accountInstance = 1;
}

message AddressUpdateResponse {
}
