syntax = "proto3";

import "google/api/annotations.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "types/envelope/envelope.proto";
import "types/ethereum/base.proto";
import "types/chain/chain.proto";

option go_package = "gitlab.com/ConsenSys/client/fr/core-stack/orchestrate.git/types/envelope-store";

package envelopestore;

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
	info: {
		title: "Envelope-Store"
        version: "1.0"
        contact: {
            name: "âœ‰ PegaSys Orchestrate"
            email: "support@pegasys.tech"
        }
    }
    external_docs: {
        url: "https://docs.orchestrate.pegasys.tech/en/latest/"
        description: "ðŸ“’ Documentation of PegaSys Orchestrate"
    }
};

// Possible statuses for a transaction
enum Status {
    STORED = 0;
    PENDING = 1;
    MINED = 2;
    ERROR = 3;
}

// Store is a service responsible to store Envelopes
service EnvelopeStore {
    // Store an envelope
    rpc Store (StoreRequest) returns (StoreResponse);

    // Load envelope by identifier
    rpc LoadByID (LoadByIDRequest) returns (StoreResponse) {
        option (google.api.http) = {
            get: "/envelopes/{id}"
        };
    }

    // Load Envelope by transaction hash
    rpc LoadByTxHash (LoadByTxHashRequest) returns (StoreResponse);

    // SetStatus set an envelope status
    rpc SetStatus (SetStatusRequest) returns (StatusResponse);

    // LoadPending load envelopes of pending transactions
    rpc LoadPending (LoadPendingRequest) returns (LoadPendingResponse);
}

message StatusInfo {
    // Status of Transaction
    Status status = 1;

    // Date events for envelope
    google.protobuf.Timestamp storedAt = 2;
    google.protobuf.Timestamp sentAt = 3;
    google.protobuf.Timestamp minedAt = 4;
    google.protobuf.Timestamp errorAt = 5;
}

message StoreRequest {
    envelope.Envelope envelope = 1;
}

message StoreResponse {
    // Envelope
    envelope.Envelope envelope = 1;

    StatusInfo status_info = 2;
}

message LoadByIDRequest {
    // Envelope identifier
    string id = 1;
}

message LoadByTxHashRequest {
    // Chain the transaction has been sent to
    chain.Chain chain = 2;

    // Hash of the transaction
    ethereum.Hash tx_hash = 3;
}

message SetStatusRequest {
    // Envelope identifier
    string id = 1;

    // Status
    Status status = 2;
}

message StatusResponse {
    StatusInfo status_info = 1;
}

message LoadPendingRequest {
    // Pending duration
    google.protobuf.Duration duration = 1;
}

message LoadPendingResponse {
    // Pending envelopes
    repeated StoreResponse responses = 1;
}
