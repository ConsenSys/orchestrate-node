/* eslint-disable */
/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var protobuf_ethereum_ethereum_pb = require('../../protobuf/ethereum/ethereum_pb.js');
goog.exportSymbol('proto.context.manager.Account', null, global);
goog.exportSymbol('proto.context.manager.Call', null, global);
goog.exportSymbol('proto.context.manager.Chain', null, global);
goog.exportSymbol('proto.context.manager.Error', null, global);
goog.exportSymbol('proto.context.manager.Metadata', null, global);
goog.exportSymbol('proto.context.manager.Trace', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.context.manager.Account = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.context.manager.Account, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.context.manager.Account.displayName = 'proto.context.manager.Account';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.context.manager.Account.prototype.toObject = function(opt_includeInstance) {
  return proto.context.manager.Account.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.context.manager.Account} msg The msg instance to transform.
 * @return {!Object}
 */
proto.context.manager.Account.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    address: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.context.manager.Account}
 */
proto.context.manager.Account.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.context.manager.Account;
  return proto.context.manager.Account.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.context.manager.Account} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.context.manager.Account}
 */
proto.context.manager.Account.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.context.manager.Account.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.context.manager.Account.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.context.manager.Account} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.context.manager.Account.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.context.manager.Account.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.context.manager.Account.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string address = 2;
 * @return {string}
 */
proto.context.manager.Account.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.context.manager.Account.prototype.setAddress = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.context.manager.Chain = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.context.manager.Chain, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.context.manager.Chain.displayName = 'proto.context.manager.Chain';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.context.manager.Chain.prototype.toObject = function(opt_includeInstance) {
  return proto.context.manager.Chain.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.context.manager.Chain} msg The msg instance to transform.
 * @return {!Object}
 */
proto.context.manager.Chain.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    iseip155: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.context.manager.Chain}
 */
proto.context.manager.Chain.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.context.manager.Chain;
  return proto.context.manager.Chain.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.context.manager.Chain} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.context.manager.Chain}
 */
proto.context.manager.Chain.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIseip155(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.context.manager.Chain.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.context.manager.Chain.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.context.manager.Chain} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.context.manager.Chain.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIseip155();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.context.manager.Chain.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.context.manager.Chain.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bool isEIP155 = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.context.manager.Chain.prototype.getIseip155 = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.context.manager.Chain.prototype.setIseip155 = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.context.manager.Call = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.context.manager.Call.repeatedFields_, null);
};
goog.inherits(proto.context.manager.Call, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.context.manager.Call.displayName = 'proto.context.manager.Call';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.context.manager.Call.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.context.manager.Call.prototype.toObject = function(opt_includeInstance) {
  return proto.context.manager.Call.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.context.manager.Call} msg The msg instance to transform.
 * @return {!Object}
 */
proto.context.manager.Call.toObject = function(includeInstance, msg) {
  var f, obj = {
    methodid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    argsList: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.context.manager.Call}
 */
proto.context.manager.Call.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.context.manager.Call;
  return proto.context.manager.Call.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.context.manager.Call} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.context.manager.Call}
 */
proto.context.manager.Call.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethodid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addArgs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.context.manager.Call.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.context.manager.Call.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.context.manager.Call} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.context.manager.Call.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMethodid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getArgsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional string methodId = 1;
 * @return {string}
 */
proto.context.manager.Call.prototype.getMethodid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.context.manager.Call.prototype.setMethodid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated string args = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.context.manager.Call.prototype.getArgsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 2));
};


/** @param {!Array.<string>} value */
proto.context.manager.Call.prototype.setArgsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.context.manager.Call.prototype.addArgs = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.context.manager.Call.prototype.clearArgsList = function() {
  this.setArgsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.context.manager.Metadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.context.manager.Metadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.context.manager.Metadata.displayName = 'proto.context.manager.Metadata';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.context.manager.Metadata.prototype.toObject = function(opt_includeInstance) {
  return proto.context.manager.Metadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.context.manager.Metadata} msg The msg instance to transform.
 * @return {!Object}
 */
proto.context.manager.Metadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.context.manager.Metadata}
 */
proto.context.manager.Metadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.context.manager.Metadata;
  return proto.context.manager.Metadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.context.manager.Metadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.context.manager.Metadata}
 */
proto.context.manager.Metadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.context.manager.Metadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.context.manager.Metadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.context.manager.Metadata} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.context.manager.Metadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.context.manager.Metadata.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.context.manager.Metadata.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.context.manager.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.context.manager.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.context.manager.Error.displayName = 'proto.context.manager.Error';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.context.manager.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.context.manager.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.context.manager.Error} msg The msg instance to transform.
 * @return {!Object}
 */
proto.context.manager.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.context.manager.Error}
 */
proto.context.manager.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.context.manager.Error;
  return proto.context.manager.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.context.manager.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.context.manager.Error}
 */
proto.context.manager.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.context.manager.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.context.manager.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.context.manager.Error} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.context.manager.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint64 type = 1;
 * @return {number}
 */
proto.context.manager.Error.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.context.manager.Error.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.context.manager.Error.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.context.manager.Error.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.context.manager.Trace = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.context.manager.Trace.repeatedFields_, null);
};
goog.inherits(proto.context.manager.Trace, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.context.manager.Trace.displayName = 'proto.context.manager.Trace';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.context.manager.Trace.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.context.manager.Trace.prototype.toObject = function(opt_includeInstance) {
  return proto.context.manager.Trace.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.context.manager.Trace} msg The msg instance to transform.
 * @return {!Object}
 */
proto.context.manager.Trace.toObject = function(includeInstance, msg) {
  var f, obj = {
    sender: (f = msg.getSender()) && proto.context.manager.Account.toObject(includeInstance, f),
    chain: (f = msg.getChain()) && proto.context.manager.Chain.toObject(includeInstance, f),
    receiver: (f = msg.getReceiver()) && proto.context.manager.Account.toObject(includeInstance, f),
    call: (f = msg.getCall()) && proto.context.manager.Call.toObject(includeInstance, f),
    transaction: (f = msg.getTransaction()) && protobuf_ethereum_ethereum_pb.Transaction.toObject(includeInstance, f),
    receipt: (f = msg.getReceipt()) && protobuf_ethereum_ethereum_pb.Receipt.toObject(includeInstance, f),
    errorsList: jspb.Message.toObjectList(msg.getErrorsList(),
    proto.context.manager.Error.toObject, includeInstance),
    metadata: (f = msg.getMetadata()) && proto.context.manager.Metadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.context.manager.Trace}
 */
proto.context.manager.Trace.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.context.manager.Trace;
  return proto.context.manager.Trace.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.context.manager.Trace} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.context.manager.Trace}
 */
proto.context.manager.Trace.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.context.manager.Account;
      reader.readMessage(value,proto.context.manager.Account.deserializeBinaryFromReader);
      msg.setSender(value);
      break;
    case 2:
      var value = new proto.context.manager.Chain;
      reader.readMessage(value,proto.context.manager.Chain.deserializeBinaryFromReader);
      msg.setChain(value);
      break;
    case 3:
      var value = new proto.context.manager.Account;
      reader.readMessage(value,proto.context.manager.Account.deserializeBinaryFromReader);
      msg.setReceiver(value);
      break;
    case 4:
      var value = new proto.context.manager.Call;
      reader.readMessage(value,proto.context.manager.Call.deserializeBinaryFromReader);
      msg.setCall(value);
      break;
    case 5:
      var value = new protobuf_ethereum_ethereum_pb.Transaction;
      reader.readMessage(value,protobuf_ethereum_ethereum_pb.Transaction.deserializeBinaryFromReader);
      msg.setTransaction(value);
      break;
    case 6:
      var value = new protobuf_ethereum_ethereum_pb.Receipt;
      reader.readMessage(value,protobuf_ethereum_ethereum_pb.Receipt.deserializeBinaryFromReader);
      msg.setReceipt(value);
      break;
    case 7:
      var value = new proto.context.manager.Error;
      reader.readMessage(value,proto.context.manager.Error.deserializeBinaryFromReader);
      msg.addErrors(value);
      break;
    case 8:
      var value = new proto.context.manager.Metadata;
      reader.readMessage(value,proto.context.manager.Metadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.context.manager.Trace.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.context.manager.Trace.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.context.manager.Trace} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.context.manager.Trace.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSender();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.context.manager.Account.serializeBinaryToWriter
    );
  }
  f = message.getChain();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.context.manager.Chain.serializeBinaryToWriter
    );
  }
  f = message.getReceiver();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.context.manager.Account.serializeBinaryToWriter
    );
  }
  f = message.getCall();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.context.manager.Call.serializeBinaryToWriter
    );
  }
  f = message.getTransaction();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      protobuf_ethereum_ethereum_pb.Transaction.serializeBinaryToWriter
    );
  }
  f = message.getReceipt();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      protobuf_ethereum_ethereum_pb.Receipt.serializeBinaryToWriter
    );
  }
  f = message.getErrorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.context.manager.Error.serializeBinaryToWriter
    );
  }
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.context.manager.Metadata.serializeBinaryToWriter
    );
  }
};


/**
 * optional Account sender = 1;
 * @return {?proto.context.manager.Account}
 */
proto.context.manager.Trace.prototype.getSender = function() {
  return /** @type{?proto.context.manager.Account} */ (
    jspb.Message.getWrapperField(this, proto.context.manager.Account, 1));
};


/** @param {?proto.context.manager.Account|undefined} value */
proto.context.manager.Trace.prototype.setSender = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.context.manager.Trace.prototype.clearSender = function() {
  this.setSender(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.context.manager.Trace.prototype.hasSender = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Chain chain = 2;
 * @return {?proto.context.manager.Chain}
 */
proto.context.manager.Trace.prototype.getChain = function() {
  return /** @type{?proto.context.manager.Chain} */ (
    jspb.Message.getWrapperField(this, proto.context.manager.Chain, 2));
};


/** @param {?proto.context.manager.Chain|undefined} value */
proto.context.manager.Trace.prototype.setChain = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.context.manager.Trace.prototype.clearChain = function() {
  this.setChain(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.context.manager.Trace.prototype.hasChain = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Account receiver = 3;
 * @return {?proto.context.manager.Account}
 */
proto.context.manager.Trace.prototype.getReceiver = function() {
  return /** @type{?proto.context.manager.Account} */ (
    jspb.Message.getWrapperField(this, proto.context.manager.Account, 3));
};


/** @param {?proto.context.manager.Account|undefined} value */
proto.context.manager.Trace.prototype.setReceiver = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.context.manager.Trace.prototype.clearReceiver = function() {
  this.setReceiver(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.context.manager.Trace.prototype.hasReceiver = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Call call = 4;
 * @return {?proto.context.manager.Call}
 */
proto.context.manager.Trace.prototype.getCall = function() {
  return /** @type{?proto.context.manager.Call} */ (
    jspb.Message.getWrapperField(this, proto.context.manager.Call, 4));
};


/** @param {?proto.context.manager.Call|undefined} value */
proto.context.manager.Trace.prototype.setCall = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.context.manager.Trace.prototype.clearCall = function() {
  this.setCall(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.context.manager.Trace.prototype.hasCall = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Transaction transaction = 5;
 * @return {?proto.context.manager.Transaction}
 */
proto.context.manager.Trace.prototype.getTransaction = function() {
  return /** @type{?proto.context.manager.Transaction} */ (
    jspb.Message.getWrapperField(this, protobuf_ethereum_ethereum_pb.Transaction, 5));
};


/** @param {?proto.context.manager.Transaction|undefined} value */
proto.context.manager.Trace.prototype.setTransaction = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.context.manager.Trace.prototype.clearTransaction = function() {
  this.setTransaction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.context.manager.Trace.prototype.hasTransaction = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Receipt receipt = 6;
 * @return {?proto.context.manager.Receipt}
 */
proto.context.manager.Trace.prototype.getReceipt = function() {
  return /** @type{?proto.context.manager.Receipt} */ (
    jspb.Message.getWrapperField(this, protobuf_ethereum_ethereum_pb.Receipt, 6));
};


/** @param {?proto.context.manager.Receipt|undefined} value */
proto.context.manager.Trace.prototype.setReceipt = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.context.manager.Trace.prototype.clearReceipt = function() {
  this.setReceipt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.context.manager.Trace.prototype.hasReceipt = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated Error errors = 7;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.context.manager.Error>}
 */
proto.context.manager.Trace.prototype.getErrorsList = function() {
  return /** @type{!Array.<!proto.context.manager.Error>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.context.manager.Error, 7));
};


/** @param {!Array.<!proto.context.manager.Error>} value */
proto.context.manager.Trace.prototype.setErrorsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.context.manager.Error=} opt_value
 * @param {number=} opt_index
 * @return {!proto.context.manager.Error}
 */
proto.context.manager.Trace.prototype.addErrors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.context.manager.Error, opt_index);
};


proto.context.manager.Trace.prototype.clearErrorsList = function() {
  this.setErrorsList([]);
};


/**
 * optional Metadata metadata = 8;
 * @return {?proto.context.manager.Metadata}
 */
proto.context.manager.Trace.prototype.getMetadata = function() {
  return /** @type{?proto.context.manager.Metadata} */ (
    jspb.Message.getWrapperField(this, proto.context.manager.Metadata, 8));
};


/** @param {?proto.context.manager.Metadata|undefined} value */
proto.context.manager.Trace.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.context.manager.Trace.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.context.manager.Trace.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 8) != null;
};


goog.object.extend(exports, proto.context.manager);
