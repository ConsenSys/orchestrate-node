/* eslint-disable */
/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.context.manager.Log', null, global);
goog.exportSymbol('proto.context.manager.Receipt', null, global);
goog.exportSymbol('proto.context.manager.Transaction', null, global);
goog.exportSymbol('proto.context.manager.TxData', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.context.manager.TxData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.context.manager.TxData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.context.manager.TxData.displayName = 'proto.context.manager.TxData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.context.manager.TxData.prototype.toObject = function(opt_includeInstance) {
  return proto.context.manager.TxData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.context.manager.TxData} msg The msg instance to transform.
 * @return {!Object}
 */
proto.context.manager.TxData.toObject = function(includeInstance, msg) {
  var f, obj = {
    nonce: jspb.Message.getFieldWithDefault(msg, 1, 0),
    to: jspb.Message.getFieldWithDefault(msg, 2, ""),
    value: jspb.Message.getFieldWithDefault(msg, 3, ""),
    gas: jspb.Message.getFieldWithDefault(msg, 4, 0),
    gasprice: jspb.Message.getFieldWithDefault(msg, 5, ""),
    data: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.context.manager.TxData}
 */
proto.context.manager.TxData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.context.manager.TxData;
  return proto.context.manager.TxData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.context.manager.TxData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.context.manager.TxData}
 */
proto.context.manager.TxData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNonce(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTo(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGas(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setGasprice(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.context.manager.TxData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.context.manager.TxData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.context.manager.TxData} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.context.manager.TxData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNonce();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTo();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getGas();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getGasprice();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getData();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional uint64 nonce = 1;
 * @return {number}
 */
proto.context.manager.TxData.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.context.manager.TxData.prototype.setNonce = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string to = 2;
 * @return {string}
 */
proto.context.manager.TxData.prototype.getTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.context.manager.TxData.prototype.setTo = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string value = 3;
 * @return {string}
 */
proto.context.manager.TxData.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.context.manager.TxData.prototype.setValue = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint64 gas = 4;
 * @return {number}
 */
proto.context.manager.TxData.prototype.getGas = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.context.manager.TxData.prototype.setGas = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string gasPrice = 5;
 * @return {string}
 */
proto.context.manager.TxData.prototype.getGasprice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.context.manager.TxData.prototype.setGasprice = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string data = 6;
 * @return {string}
 */
proto.context.manager.TxData.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.context.manager.TxData.prototype.setData = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.context.manager.Transaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.context.manager.Transaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.context.manager.Transaction.displayName = 'proto.context.manager.Transaction';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.context.manager.Transaction.prototype.toObject = function(opt_includeInstance) {
  return proto.context.manager.Transaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.context.manager.Transaction} msg The msg instance to transform.
 * @return {!Object}
 */
proto.context.manager.Transaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    txdata: (f = msg.getTxdata()) && proto.context.manager.TxData.toObject(includeInstance, f),
    raw: jspb.Message.getFieldWithDefault(msg, 2, ""),
    hash: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.context.manager.Transaction}
 */
proto.context.manager.Transaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.context.manager.Transaction;
  return proto.context.manager.Transaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.context.manager.Transaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.context.manager.Transaction}
 */
proto.context.manager.Transaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.context.manager.TxData;
      reader.readMessage(value,proto.context.manager.TxData.deserializeBinaryFromReader);
      msg.setTxdata(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRaw(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.context.manager.Transaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.context.manager.Transaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.context.manager.Transaction} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.context.manager.Transaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxdata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.context.manager.TxData.serializeBinaryToWriter
    );
  }
  f = message.getRaw();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional TxData txData = 1;
 * @return {?proto.context.manager.TxData}
 */
proto.context.manager.Transaction.prototype.getTxdata = function() {
  return /** @type{?proto.context.manager.TxData} */ (
    jspb.Message.getWrapperField(this, proto.context.manager.TxData, 1));
};


/** @param {?proto.context.manager.TxData|undefined} value */
proto.context.manager.Transaction.prototype.setTxdata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.context.manager.Transaction.prototype.clearTxdata = function() {
  this.setTxdata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.context.manager.Transaction.prototype.hasTxdata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string raw = 2;
 * @return {string}
 */
proto.context.manager.Transaction.prototype.getRaw = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.context.manager.Transaction.prototype.setRaw = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string hash = 3;
 * @return {string}
 */
proto.context.manager.Transaction.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.context.manager.Transaction.prototype.setHash = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.context.manager.Log = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.context.manager.Log.repeatedFields_, null);
};
goog.inherits(proto.context.manager.Log, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.context.manager.Log.displayName = 'proto.context.manager.Log';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.context.manager.Log.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.context.manager.Log.prototype.toObject = function(opt_includeInstance) {
  return proto.context.manager.Log.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.context.manager.Log} msg The msg instance to transform.
 * @return {!Object}
 */
proto.context.manager.Log.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    topicsList: jspb.Message.getField(msg, 2),
    data: jspb.Message.getFieldWithDefault(msg, 3, ""),
    decodeddataMap: (f = msg.getDecodeddataMap()) ? f.toObject(includeInstance, undefined) : [],
    blocknumber: jspb.Message.getFieldWithDefault(msg, 5, 0),
    txhash: jspb.Message.getFieldWithDefault(msg, 6, ""),
    txindex: jspb.Message.getFieldWithDefault(msg, 7, 0),
    blockhash: jspb.Message.getFieldWithDefault(msg, 8, ""),
    index: jspb.Message.getFieldWithDefault(msg, 9, 0),
    removed: jspb.Message.getFieldWithDefault(msg, 10, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.context.manager.Log}
 */
proto.context.manager.Log.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.context.manager.Log;
  return proto.context.manager.Log.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.context.manager.Log} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.context.manager.Log}
 */
proto.context.manager.Log.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addTopics(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setData(value);
      break;
    case 4:
      var value = msg.getDecodeddataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString);
         });
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlocknumber(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxhash(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTxindex(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockhash(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setIndex(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRemoved(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.context.manager.Log.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.context.manager.Log.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.context.manager.Log} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.context.manager.Log.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTopicsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getData();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDecodeddataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getBlocknumber();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getTxhash();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getTxindex();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getBlockhash();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
  f = message.getRemoved();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.context.manager.Log.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.context.manager.Log.prototype.setAddress = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated string topics = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.context.manager.Log.prototype.getTopicsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 2));
};


/** @param {!Array.<string>} value */
proto.context.manager.Log.prototype.setTopicsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.context.manager.Log.prototype.addTopics = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.context.manager.Log.prototype.clearTopicsList = function() {
  this.setTopicsList([]);
};


/**
 * optional string data = 3;
 * @return {string}
 */
proto.context.manager.Log.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.context.manager.Log.prototype.setData = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * map<string, string> decodedData = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.context.manager.Log.prototype.getDecodeddataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


proto.context.manager.Log.prototype.clearDecodeddataMap = function() {
  this.getDecodeddataMap().clear();
};


/**
 * optional uint64 blockNumber = 5;
 * @return {number}
 */
proto.context.manager.Log.prototype.getBlocknumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.context.manager.Log.prototype.setBlocknumber = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string txHash = 6;
 * @return {string}
 */
proto.context.manager.Log.prototype.getTxhash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.context.manager.Log.prototype.setTxhash = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional uint64 txIndex = 7;
 * @return {number}
 */
proto.context.manager.Log.prototype.getTxindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.context.manager.Log.prototype.setTxindex = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string blockHash = 8;
 * @return {string}
 */
proto.context.manager.Log.prototype.getBlockhash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.context.manager.Log.prototype.setBlockhash = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional uint64 index = 9;
 * @return {number}
 */
proto.context.manager.Log.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.context.manager.Log.prototype.setIndex = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional bool removed = 10;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.context.manager.Log.prototype.getRemoved = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 10, false));
};


/** @param {boolean} value */
proto.context.manager.Log.prototype.setRemoved = function(value) {
  jspb.Message.setField(this, 10, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.context.manager.Receipt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.context.manager.Receipt.repeatedFields_, null);
};
goog.inherits(proto.context.manager.Receipt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.context.manager.Receipt.displayName = 'proto.context.manager.Receipt';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.context.manager.Receipt.repeatedFields_ = [11];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.context.manager.Receipt.prototype.toObject = function(opt_includeInstance) {
  return proto.context.manager.Receipt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.context.manager.Receipt} msg The msg instance to transform.
 * @return {!Object}
 */
proto.context.manager.Receipt.toObject = function(includeInstance, msg) {
  var f, obj = {
    txhash: jspb.Message.getFieldWithDefault(msg, 1, ""),
    blockhash: jspb.Message.getFieldWithDefault(msg, 2, ""),
    blocknumber: jspb.Message.getFieldWithDefault(msg, 3, 0),
    txindex: jspb.Message.getFieldWithDefault(msg, 4, 0),
    contractaddress: jspb.Message.getFieldWithDefault(msg, 6, ""),
    poststate: jspb.Message.getFieldWithDefault(msg, 7, ""),
    status: jspb.Message.getFieldWithDefault(msg, 8, 0),
    bloom: jspb.Message.getFieldWithDefault(msg, 10, ""),
    logsList: jspb.Message.toObjectList(msg.getLogsList(),
    proto.context.manager.Log.toObject, includeInstance),
    gasused: jspb.Message.getFieldWithDefault(msg, 12, 0),
    cumulativegasused: jspb.Message.getFieldWithDefault(msg, 13, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.context.manager.Receipt}
 */
proto.context.manager.Receipt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.context.manager.Receipt;
  return proto.context.manager.Receipt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.context.manager.Receipt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.context.manager.Receipt}
 */
proto.context.manager.Receipt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxhash(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockhash(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlocknumber(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTxindex(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractaddress(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setPoststate(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStatus(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setBloom(value);
      break;
    case 11:
      var value = new proto.context.manager.Log;
      reader.readMessage(value,proto.context.manager.Log.deserializeBinaryFromReader);
      msg.addLogs(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGasused(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCumulativegasused(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.context.manager.Receipt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.context.manager.Receipt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.context.manager.Receipt} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.context.manager.Receipt.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxhash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBlockhash();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBlocknumber();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getTxindex();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getContractaddress();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getPoststate();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getBloom();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getLogsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.context.manager.Log.serializeBinaryToWriter
    );
  }
  f = message.getGasused();
  if (f !== 0) {
    writer.writeUint64(
      12,
      f
    );
  }
  f = message.getCumulativegasused();
  if (f !== 0) {
    writer.writeUint64(
      13,
      f
    );
  }
};


/**
 * optional string txHash = 1;
 * @return {string}
 */
proto.context.manager.Receipt.prototype.getTxhash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.context.manager.Receipt.prototype.setTxhash = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string blockHash = 2;
 * @return {string}
 */
proto.context.manager.Receipt.prototype.getBlockhash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.context.manager.Receipt.prototype.setBlockhash = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint64 blockNumber = 3;
 * @return {number}
 */
proto.context.manager.Receipt.prototype.getBlocknumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.context.manager.Receipt.prototype.setBlocknumber = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint64 TxIndex = 4;
 * @return {number}
 */
proto.context.manager.Receipt.prototype.getTxindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.context.manager.Receipt.prototype.setTxindex = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string contractAddress = 6;
 * @return {string}
 */
proto.context.manager.Receipt.prototype.getContractaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.context.manager.Receipt.prototype.setContractaddress = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string postState = 7;
 * @return {string}
 */
proto.context.manager.Receipt.prototype.getPoststate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.context.manager.Receipt.prototype.setPoststate = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional uint64 status = 8;
 * @return {number}
 */
proto.context.manager.Receipt.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.context.manager.Receipt.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional string bloom = 10;
 * @return {string}
 */
proto.context.manager.Receipt.prototype.getBloom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.context.manager.Receipt.prototype.setBloom = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * repeated Log logs = 11;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.context.manager.Log>}
 */
proto.context.manager.Receipt.prototype.getLogsList = function() {
  return /** @type{!Array.<!proto.context.manager.Log>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.context.manager.Log, 11));
};


/** @param {!Array.<!proto.context.manager.Log>} value */
proto.context.manager.Receipt.prototype.setLogsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.context.manager.Log=} opt_value
 * @param {number=} opt_index
 * @return {!proto.context.manager.Log}
 */
proto.context.manager.Receipt.prototype.addLogs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.context.manager.Log, opt_index);
};


proto.context.manager.Receipt.prototype.clearLogsList = function() {
  this.setLogsList([]);
};


/**
 * optional uint64 gasUsed = 12;
 * @return {number}
 */
proto.context.manager.Receipt.prototype.getGasused = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.context.manager.Receipt.prototype.setGasused = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional uint64 cumulativeGasUsed = 13;
 * @return {number}
 */
proto.context.manager.Receipt.prototype.getCumulativegasused = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.context.manager.Receipt.prototype.setCumulativegasused = function(value) {
  jspb.Message.setField(this, 13, value);
};


goog.object.extend(exports, proto.context.manager);
