---
version: 2.1

executors:
  node_executor:
    docker:
      - image: circleci/node:12.9.0-stretch

jobs:
  check:
    executor: node_executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - node-cache-{{ checksum "package-lock.json" }}
            - node-cache-
      - run:
          name: Install dependencies
          command: npm ci
      - save_cache:
          paths:
            - ~/.npm
          key: node-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Check lints
          command: npm run lint
      - run:
          name: Check formatting
          command: npm run check-formatting

  build:
    executor: node_executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - node-cache-{{ checksum "package-lock.json" }}
            - node-cache-
      - run:
          name: Install dependencies
          command: npm ci
      - save_cache:
          paths:
            - ~/.npm
          key: node-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Build
          command: npm run build
      - persist_to_workspace:
          root: ~/project
          paths:
            - ./lib

  test:
    executor: node_executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - node-cache-{{ checksum "package-lock.json" }}
            - node-cache-
      - run:
          name: Install dependencies
          command: npm ci
      - save_cache:
          paths:
            - ~/.npm
          key: node-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Unit tests
          command: npm run test:coverage

  publish:
    executor: node_executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - node-cache-{{ checksum "package-lock.json" }}
            - node-cache-
      - attach_workspace:
          at: ~/project
      - publish:
          name: Publish on npm
          command: |
            echo '//registry.npmjs.org/:_authToken=${NPM_TOKEN}'>.npmrc
            npm publish --access public

  generateDoc:
    executor: node_executor
    steps:
    - checkout
    - restore_cache:
        keys:
          - node-cache-{{ checksum "package-lock.json" }}
          - node-cache-
    - run:
        name: install packages
        command: npm ci
    - save_cache:
        paths:
          - ~/.npm
        key: node-cache-{{ checksum "package-lock.json" }}
    - run:
        name: build doc
        command: npm run generate:docs
    - run:
        name: archive doc
        command: tar -czf orchestrate-sdk-doc.tgz ./docs/out
    - store_artifacts:
        path: ./orchestrate-sdk-doc.tgz
    - run:
        name: organise doc dirs
        command: node .circleci/organise_doc.js --rootdir=$(pwd) --tag="${CIRCLE_TAG}"
    - persist_to_workspace:
        root: ~/project
        paths:
          - ./docs

  publishDoc:
    executor: node_executor
    steps:
    - checkout
    - attach_workspace:
        at: /tmp/workspace
    - add_ssh_keys:
        fingerprints:
          - 'b4:b3:84:2a:8d:25:45:39:f4:b1:86:4d:d4:db:fb:b4'
    - run:
        name: Set Git user params
        command: |
          git config --global user.name $CIRCLE_USERNAME
          git config --global user.email "${CIRCLE_USERNAME}@users.noreply.github.com"
    - deploy:
        name: Commit and push docs changes
        command: |
          # publishing happens by pushing files to gh-pages branch
          readonly BRANCH='test-gh-pages' # TODO change to gh-pages before PR merge

          # check if branch exists on origin and if not exits with error.
          # the branch should be manually created and protected to be used.
          git ls-remote --heads --exit-code origin $BRANCH
          if [ $? != 0 ]; then
              echo "Error: ${BRANCH} branch doesn't exist on ${CIRCLE_REPOSITORY_URL}"
              exit 1
          fi

          # switch to the publishing branch
          git checkout "$BRANCH"

          # copy the content of the docs folder built on the previous job and attached
          # using workspace on temp location
          # cp with T option to override existing content, specially usefull for latest
          cp -aT /tmp/workspace/docs/. .

          # add a readme to make sure devs understand that this publishing branch is generated
          # by CI (use template readme) and replace the current readme that is only for source dir
          rm README.md
          mv TARGET_README.md README.md

          # add all new copied content of the workspace to git
          git add .

          # commit with infos on the triggering task and branch
          # use [skip ci] to prevent CI from runnning on this branch as no CI is configured
          git commit -m "Automated SDK documentation update" \
                     -m "[ci skip] Circle CI build ${CIRCLE_BUILD_NUM}, see ${CIRCLE_BUILD_URL}" \
                     -m "Branch: ${CIRCLE_BRANCH}, commit: ${CIRCLE_SHA1}, tag:${CIRCLE_TAG-none}"

          # push changes to the Github Pages publishing branch on origin repos
          git push --set-upstream origin $BRANCH
          git push origin
workflows:
  version: 2
  workflow:
    jobs:
      - check
      - build
      - test
      - generateDoc:
          requires:
            - build
      - publishDoc:
          requires:
            - check
            - test
            - generateDoc
      # - wait-for-approval: # Runs for tags only
      #     type: approval
      #     requires:
      #       - test
      #       - check
      #       - build
      #     filters:
      #       tags:
      #         only: /^v.*/
      #       branches:
      #         ignore: /.*/
      # - publish: # Runs for tags only
      #     requires:
      #       - wait-for-approval
      #     filters:
      #       tags:
      #         only: /^v.*/
      #       branches:
      #         ignore: /.*/
