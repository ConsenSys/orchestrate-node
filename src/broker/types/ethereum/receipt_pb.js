/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.ethereum.Log', null, global);
goog.exportSymbol('proto.ethereum.Receipt', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ethereum.Log = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ethereum.Log.repeatedFields_, null);
};
goog.inherits(proto.ethereum.Log, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ethereum.Log.displayName = 'proto.ethereum.Log';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ethereum.Receipt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ethereum.Receipt.repeatedFields_, null);
};
goog.inherits(proto.ethereum.Receipt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ethereum.Receipt.displayName = 'proto.ethereum.Receipt';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ethereum.Log.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ethereum.Log.prototype.toObject = function(opt_includeInstance) {
  return proto.ethereum.Log.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ethereum.Log} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ethereum.Log.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    topicsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    data: msg.getData_asB64(),
    event: jspb.Message.getFieldWithDefault(msg, 4, ""),
    decodedDataMap: (f = msg.getDecodedDataMap()) ? f.toObject(includeInstance, undefined) : [],
    blockNumber: jspb.Message.getFieldWithDefault(msg, 6, 0),
    txHash: jspb.Message.getFieldWithDefault(msg, 7, ""),
    txIndex: jspb.Message.getFieldWithDefault(msg, 8, 0),
    blockHash: jspb.Message.getFieldWithDefault(msg, 9, ""),
    index: jspb.Message.getFieldWithDefault(msg, 10, 0),
    removed: jspb.Message.getBooleanFieldWithDefault(msg, 11, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ethereum.Log}
 */
proto.ethereum.Log.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ethereum.Log;
  return proto.ethereum.Log.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ethereum.Log} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ethereum.Log}
 */
proto.ethereum.Log.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addTopics(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setEvent(value);
      break;
    case 5:
      var value = msg.getDecodedDataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockNumber(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxHash(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTxIndex(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockHash(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setIndex(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRemoved(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ethereum.Log.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ethereum.Log.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ethereum.Log} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ethereum.Log.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTopicsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getEvent();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDecodedDataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getBlockNumber();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getTxHash();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getTxIndex();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getBlockHash();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint64(
      10,
      f
    );
  }
  f = message.getRemoved();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.ethereum.Log.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ethereum.Log.prototype.setAddress = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string topics = 2;
 * @return {!Array<string>}
 */
proto.ethereum.Log.prototype.getTopicsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.ethereum.Log.prototype.setTopicsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.ethereum.Log.prototype.addTopics = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.ethereum.Log.prototype.clearTopicsList = function() {
  this.setTopicsList([]);
};


/**
 * optional bytes data = 3;
 * @return {!(string|Uint8Array)}
 */
proto.ethereum.Log.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes data = 3;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.ethereum.Log.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.ethereum.Log.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.ethereum.Log.prototype.setData = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional string event = 4;
 * @return {string}
 */
proto.ethereum.Log.prototype.getEvent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.ethereum.Log.prototype.setEvent = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * map<string, string> decoded_data = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.ethereum.Log.prototype.getDecodedDataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.ethereum.Log.prototype.clearDecodedDataMap = function() {
  this.getDecodedDataMap().clear();
};


/**
 * optional uint64 block_number = 6;
 * @return {number}
 */
proto.ethereum.Log.prototype.getBlockNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.ethereum.Log.prototype.setBlockNumber = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string tx_hash = 7;
 * @return {string}
 */
proto.ethereum.Log.prototype.getTxHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.ethereum.Log.prototype.setTxHash = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional uint64 tx_index = 8;
 * @return {number}
 */
proto.ethereum.Log.prototype.getTxIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.ethereum.Log.prototype.setTxIndex = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional string block_hash = 9;
 * @return {string}
 */
proto.ethereum.Log.prototype.getBlockHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.ethereum.Log.prototype.setBlockHash = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional uint64 index = 10;
 * @return {number}
 */
proto.ethereum.Log.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.ethereum.Log.prototype.setIndex = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional bool removed = 11;
 * @return {boolean}
 */
proto.ethereum.Log.prototype.getRemoved = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/** @param {boolean} value */
proto.ethereum.Log.prototype.setRemoved = function(value) {
  jspb.Message.setProto3BooleanField(this, 11, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ethereum.Receipt.repeatedFields_ = [11];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ethereum.Receipt.prototype.toObject = function(opt_includeInstance) {
  return proto.ethereum.Receipt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ethereum.Receipt} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ethereum.Receipt.toObject = function(includeInstance, msg) {
  var f, obj = {
    txHash: jspb.Message.getFieldWithDefault(msg, 1, ""),
    blockHash: jspb.Message.getFieldWithDefault(msg, 2, ""),
    blockNumber: jspb.Message.getFieldWithDefault(msg, 3, 0),
    txIndex: jspb.Message.getFieldWithDefault(msg, 4, 0),
    contractAddress: jspb.Message.getFieldWithDefault(msg, 6, ""),
    postState: msg.getPostState_asB64(),
    status: jspb.Message.getFieldWithDefault(msg, 8, 0),
    bloom: msg.getBloom_asB64(),
    logsList: jspb.Message.toObjectList(msg.getLogsList(),
    proto.ethereum.Log.toObject, includeInstance),
    gasUsed: jspb.Message.getFieldWithDefault(msg, 12, 0),
    cumulativeGasUsed: jspb.Message.getFieldWithDefault(msg, 13, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ethereum.Receipt}
 */
proto.ethereum.Receipt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ethereum.Receipt;
  return proto.ethereum.Receipt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ethereum.Receipt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ethereum.Receipt}
 */
proto.ethereum.Receipt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxHash(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockHash(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockNumber(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTxIndex(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractAddress(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPostState(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStatus(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBloom(value);
      break;
    case 11:
      var value = new proto.ethereum.Log;
      reader.readMessage(value,proto.ethereum.Log.deserializeBinaryFromReader);
      msg.addLogs(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGasUsed(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCumulativeGasUsed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ethereum.Receipt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ethereum.Receipt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ethereum.Receipt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ethereum.Receipt.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBlockHash();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBlockNumber();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getTxIndex();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getContractAddress();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getPostState_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getBloom_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
  f = message.getLogsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.ethereum.Log.serializeBinaryToWriter
    );
  }
  f = message.getGasUsed();
  if (f !== 0) {
    writer.writeUint64(
      12,
      f
    );
  }
  f = message.getCumulativeGasUsed();
  if (f !== 0) {
    writer.writeUint64(
      13,
      f
    );
  }
};


/**
 * optional string tx_hash = 1;
 * @return {string}
 */
proto.ethereum.Receipt.prototype.getTxHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ethereum.Receipt.prototype.setTxHash = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string block_hash = 2;
 * @return {string}
 */
proto.ethereum.Receipt.prototype.getBlockHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ethereum.Receipt.prototype.setBlockHash = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 block_number = 3;
 * @return {number}
 */
proto.ethereum.Receipt.prototype.getBlockNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ethereum.Receipt.prototype.setBlockNumber = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 tx_index = 4;
 * @return {number}
 */
proto.ethereum.Receipt.prototype.getTxIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.ethereum.Receipt.prototype.setTxIndex = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string contract_address = 6;
 * @return {string}
 */
proto.ethereum.Receipt.prototype.getContractAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.ethereum.Receipt.prototype.setContractAddress = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional bytes post_state = 7;
 * @return {!(string|Uint8Array)}
 */
proto.ethereum.Receipt.prototype.getPostState = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes post_state = 7;
 * This is a type-conversion wrapper around `getPostState()`
 * @return {string}
 */
proto.ethereum.Receipt.prototype.getPostState_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPostState()));
};


/**
 * optional bytes post_state = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPostState()`
 * @return {!Uint8Array}
 */
proto.ethereum.Receipt.prototype.getPostState_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPostState()));
};


/** @param {!(string|Uint8Array)} value */
proto.ethereum.Receipt.prototype.setPostState = function(value) {
  jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional uint64 status = 8;
 * @return {number}
 */
proto.ethereum.Receipt.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.ethereum.Receipt.prototype.setStatus = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional bytes bloom = 10;
 * @return {!(string|Uint8Array)}
 */
proto.ethereum.Receipt.prototype.getBloom = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes bloom = 10;
 * This is a type-conversion wrapper around `getBloom()`
 * @return {string}
 */
proto.ethereum.Receipt.prototype.getBloom_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBloom()));
};


/**
 * optional bytes bloom = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBloom()`
 * @return {!Uint8Array}
 */
proto.ethereum.Receipt.prototype.getBloom_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBloom()));
};


/** @param {!(string|Uint8Array)} value */
proto.ethereum.Receipt.prototype.setBloom = function(value) {
  jspb.Message.setProto3BytesField(this, 10, value);
};


/**
 * repeated Log logs = 11;
 * @return {!Array<!proto.ethereum.Log>}
 */
proto.ethereum.Receipt.prototype.getLogsList = function() {
  return /** @type{!Array<!proto.ethereum.Log>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ethereum.Log, 11));
};


/** @param {!Array<!proto.ethereum.Log>} value */
proto.ethereum.Receipt.prototype.setLogsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.ethereum.Log=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ethereum.Log}
 */
proto.ethereum.Receipt.prototype.addLogs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.ethereum.Log, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.ethereum.Receipt.prototype.clearLogsList = function() {
  this.setLogsList([]);
};


/**
 * optional uint64 gas_used = 12;
 * @return {number}
 */
proto.ethereum.Receipt.prototype.getGasUsed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.ethereum.Receipt.prototype.setGasUsed = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional uint64 cumulative_gas_used = 13;
 * @return {number}
 */
proto.ethereum.Receipt.prototype.getCumulativeGasUsed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.ethereum.Receipt.prototype.setCumulativeGasUsed = function(value) {
  jspb.Message.setProto3IntField(this, 13, value);
};


goog.object.extend(exports, proto.ethereum);
