// source: types/ethereum/transaction.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var types_ethereum_base_pb = require('../../types/ethereum/base_pb.js');
goog.object.extend(proto, types_ethereum_base_pb);
goog.exportSymbol('proto.ethereum.Transaction', null, global);
goog.exportSymbol('proto.ethereum.TxData', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ethereum.TxData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ethereum.TxData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ethereum.TxData.displayName = 'proto.ethereum.TxData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ethereum.Transaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ethereum.Transaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ethereum.Transaction.displayName = 'proto.ethereum.Transaction';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ethereum.TxData.prototype.toObject = function(opt_includeInstance) {
  return proto.ethereum.TxData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ethereum.TxData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ethereum.TxData.toObject = function(includeInstance, msg) {
  var f, obj = {
    nonce: jspb.Message.getFieldWithDefault(msg, 1, 0),
    to: (f = msg.getTo()) && types_ethereum_base_pb.Account.toObject(includeInstance, f),
    value: (f = msg.getValue()) && types_ethereum_base_pb.Quantity.toObject(includeInstance, f),
    gas: jspb.Message.getFieldWithDefault(msg, 4, 0),
    gasPrice: (f = msg.getGasPrice()) && types_ethereum_base_pb.Quantity.toObject(includeInstance, f),
    data: (f = msg.getData()) && types_ethereum_base_pb.Data.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ethereum.TxData}
 */
proto.ethereum.TxData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ethereum.TxData;
  return proto.ethereum.TxData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ethereum.TxData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ethereum.TxData}
 */
proto.ethereum.TxData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNonce(value);
      break;
    case 2:
      var value = new types_ethereum_base_pb.Account;
      reader.readMessage(value,types_ethereum_base_pb.Account.deserializeBinaryFromReader);
      msg.setTo(value);
      break;
    case 3:
      var value = new types_ethereum_base_pb.Quantity;
      reader.readMessage(value,types_ethereum_base_pb.Quantity.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGas(value);
      break;
    case 5:
      var value = new types_ethereum_base_pb.Quantity;
      reader.readMessage(value,types_ethereum_base_pb.Quantity.deserializeBinaryFromReader);
      msg.setGasPrice(value);
      break;
    case 6:
      var value = new types_ethereum_base_pb.Data;
      reader.readMessage(value,types_ethereum_base_pb.Data.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ethereum.TxData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ethereum.TxData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ethereum.TxData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ethereum.TxData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNonce();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      types_ethereum_base_pb.Account.serializeBinaryToWriter
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      types_ethereum_base_pb.Quantity.serializeBinaryToWriter
    );
  }
  f = message.getGas();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getGasPrice();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      types_ethereum_base_pb.Quantity.serializeBinaryToWriter
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      types_ethereum_base_pb.Data.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 nonce = 1;
 * @return {number}
 */
proto.ethereum.TxData.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ethereum.TxData} returns this
 */
proto.ethereum.TxData.prototype.setNonce = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Account to = 2;
 * @return {?proto.ethereum.Account}
 */
proto.ethereum.TxData.prototype.getTo = function() {
  return /** @type{?proto.ethereum.Account} */ (
    jspb.Message.getWrapperField(this, types_ethereum_base_pb.Account, 2));
};


/**
 * @param {?proto.ethereum.Account|undefined} value
 * @return {!proto.ethereum.TxData} returns this
*/
proto.ethereum.TxData.prototype.setTo = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ethereum.TxData} returns this
 */
proto.ethereum.TxData.prototype.clearTo = function() {
  return this.setTo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ethereum.TxData.prototype.hasTo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Quantity value = 3;
 * @return {?proto.ethereum.Quantity}
 */
proto.ethereum.TxData.prototype.getValue = function() {
  return /** @type{?proto.ethereum.Quantity} */ (
    jspb.Message.getWrapperField(this, types_ethereum_base_pb.Quantity, 3));
};


/**
 * @param {?proto.ethereum.Quantity|undefined} value
 * @return {!proto.ethereum.TxData} returns this
*/
proto.ethereum.TxData.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ethereum.TxData} returns this
 */
proto.ethereum.TxData.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ethereum.TxData.prototype.hasValue = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint64 gas = 4;
 * @return {number}
 */
proto.ethereum.TxData.prototype.getGas = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ethereum.TxData} returns this
 */
proto.ethereum.TxData.prototype.setGas = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional Quantity gas_price = 5;
 * @return {?proto.ethereum.Quantity}
 */
proto.ethereum.TxData.prototype.getGasPrice = function() {
  return /** @type{?proto.ethereum.Quantity} */ (
    jspb.Message.getWrapperField(this, types_ethereum_base_pb.Quantity, 5));
};


/**
 * @param {?proto.ethereum.Quantity|undefined} value
 * @return {!proto.ethereum.TxData} returns this
*/
proto.ethereum.TxData.prototype.setGasPrice = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ethereum.TxData} returns this
 */
proto.ethereum.TxData.prototype.clearGasPrice = function() {
  return this.setGasPrice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ethereum.TxData.prototype.hasGasPrice = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Data data = 6;
 * @return {?proto.ethereum.Data}
 */
proto.ethereum.TxData.prototype.getData = function() {
  return /** @type{?proto.ethereum.Data} */ (
    jspb.Message.getWrapperField(this, types_ethereum_base_pb.Data, 6));
};


/**
 * @param {?proto.ethereum.Data|undefined} value
 * @return {!proto.ethereum.TxData} returns this
*/
proto.ethereum.TxData.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ethereum.TxData} returns this
 */
proto.ethereum.TxData.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ethereum.TxData.prototype.hasData = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ethereum.Transaction.prototype.toObject = function(opt_includeInstance) {
  return proto.ethereum.Transaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ethereum.Transaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ethereum.Transaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    txData: (f = msg.getTxData()) && proto.ethereum.TxData.toObject(includeInstance, f),
    raw: (f = msg.getRaw()) && types_ethereum_base_pb.Data.toObject(includeInstance, f),
    hash: (f = msg.getHash()) && types_ethereum_base_pb.Hash.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ethereum.Transaction}
 */
proto.ethereum.Transaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ethereum.Transaction;
  return proto.ethereum.Transaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ethereum.Transaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ethereum.Transaction}
 */
proto.ethereum.Transaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ethereum.TxData;
      reader.readMessage(value,proto.ethereum.TxData.deserializeBinaryFromReader);
      msg.setTxData(value);
      break;
    case 2:
      var value = new types_ethereum_base_pb.Data;
      reader.readMessage(value,types_ethereum_base_pb.Data.deserializeBinaryFromReader);
      msg.setRaw(value);
      break;
    case 3:
      var value = new types_ethereum_base_pb.Hash;
      reader.readMessage(value,types_ethereum_base_pb.Hash.deserializeBinaryFromReader);
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ethereum.Transaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ethereum.Transaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ethereum.Transaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ethereum.Transaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ethereum.TxData.serializeBinaryToWriter
    );
  }
  f = message.getRaw();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      types_ethereum_base_pb.Data.serializeBinaryToWriter
    );
  }
  f = message.getHash();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      types_ethereum_base_pb.Hash.serializeBinaryToWriter
    );
  }
};


/**
 * optional TxData tx_data = 1;
 * @return {?proto.ethereum.TxData}
 */
proto.ethereum.Transaction.prototype.getTxData = function() {
  return /** @type{?proto.ethereum.TxData} */ (
    jspb.Message.getWrapperField(this, proto.ethereum.TxData, 1));
};


/**
 * @param {?proto.ethereum.TxData|undefined} value
 * @return {!proto.ethereum.Transaction} returns this
*/
proto.ethereum.Transaction.prototype.setTxData = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ethereum.Transaction} returns this
 */
proto.ethereum.Transaction.prototype.clearTxData = function() {
  return this.setTxData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ethereum.Transaction.prototype.hasTxData = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Data raw = 2;
 * @return {?proto.ethereum.Data}
 */
proto.ethereum.Transaction.prototype.getRaw = function() {
  return /** @type{?proto.ethereum.Data} */ (
    jspb.Message.getWrapperField(this, types_ethereum_base_pb.Data, 2));
};


/**
 * @param {?proto.ethereum.Data|undefined} value
 * @return {!proto.ethereum.Transaction} returns this
*/
proto.ethereum.Transaction.prototype.setRaw = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ethereum.Transaction} returns this
 */
proto.ethereum.Transaction.prototype.clearRaw = function() {
  return this.setRaw(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ethereum.Transaction.prototype.hasRaw = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Hash hash = 3;
 * @return {?proto.ethereum.Hash}
 */
proto.ethereum.Transaction.prototype.getHash = function() {
  return /** @type{?proto.ethereum.Hash} */ (
    jspb.Message.getWrapperField(this, types_ethereum_base_pb.Hash, 3));
};


/**
 * @param {?proto.ethereum.Hash|undefined} value
 * @return {!proto.ethereum.Transaction} returns this
*/
proto.ethereum.Transaction.prototype.setHash = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ethereum.Transaction} returns this
 */
proto.ethereum.Transaction.prototype.clearHash = function() {
  return this.setHash(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ethereum.Transaction.prototype.hasHash = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.ethereum);
