// source: types/contract-registry/registry.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var types_abi_abi_pb = require('../../types/abi/abi_pb.js');
goog.object.extend(proto, types_abi_abi_pb);
var types_common_account_instance_pb = require('../../types/common/account_instance_pb.js');
goog.object.extend(proto, types_common_account_instance_pb);
goog.exportSymbol('proto.contractregistry.DeleteArtifactRequest', null, global);
goog.exportSymbol('proto.contractregistry.DeleteArtifactResponse', null, global);
goog.exportSymbol('proto.contractregistry.DeregisterContractRequest', null, global);
goog.exportSymbol('proto.contractregistry.DeregisterContractResponse', null, global);
goog.exportSymbol('proto.contractregistry.GetCatalogRequest', null, global);
goog.exportSymbol('proto.contractregistry.GetCatalogResponse', null, global);
goog.exportSymbol('proto.contractregistry.GetContractABIResponse', null, global);
goog.exportSymbol('proto.contractregistry.GetContractBytecodeResponse', null, global);
goog.exportSymbol('proto.contractregistry.GetContractDeployedBytecodeResponse', null, global);
goog.exportSymbol('proto.contractregistry.GetContractRequest', null, global);
goog.exportSymbol('proto.contractregistry.GetContractResponse', null, global);
goog.exportSymbol('proto.contractregistry.GetEventsBySigHashRequest', null, global);
goog.exportSymbol('proto.contractregistry.GetEventsBySigHashResponse', null, global);
goog.exportSymbol('proto.contractregistry.GetMethodsBySelectorRequest', null, global);
goog.exportSymbol('proto.contractregistry.GetMethodsBySelectorResponse', null, global);
goog.exportSymbol('proto.contractregistry.GetTagsRequest', null, global);
goog.exportSymbol('proto.contractregistry.GetTagsResponse', null, global);
goog.exportSymbol('proto.contractregistry.RegisterContractRequest', null, global);
goog.exportSymbol('proto.contractregistry.RegisterContractResponse', null, global);
goog.exportSymbol('proto.contractregistry.SetAccountCodeHashRequest', null, global);
goog.exportSymbol('proto.contractregistry.SetAccountCodeHashResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contractregistry.RegisterContractRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contractregistry.RegisterContractRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contractregistry.RegisterContractRequest.displayName = 'proto.contractregistry.RegisterContractRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contractregistry.RegisterContractResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contractregistry.RegisterContractResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contractregistry.RegisterContractResponse.displayName = 'proto.contractregistry.RegisterContractResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contractregistry.DeregisterContractRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contractregistry.DeregisterContractRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contractregistry.DeregisterContractRequest.displayName = 'proto.contractregistry.DeregisterContractRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contractregistry.DeregisterContractResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contractregistry.DeregisterContractResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contractregistry.DeregisterContractResponse.displayName = 'proto.contractregistry.DeregisterContractResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contractregistry.DeleteArtifactRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contractregistry.DeleteArtifactRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contractregistry.DeleteArtifactRequest.displayName = 'proto.contractregistry.DeleteArtifactRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contractregistry.DeleteArtifactResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contractregistry.DeleteArtifactResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contractregistry.DeleteArtifactResponse.displayName = 'proto.contractregistry.DeleteArtifactResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contractregistry.GetContractRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contractregistry.GetContractRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contractregistry.GetContractRequest.displayName = 'proto.contractregistry.GetContractRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contractregistry.GetContractResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contractregistry.GetContractResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contractregistry.GetContractResponse.displayName = 'proto.contractregistry.GetContractResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contractregistry.GetContractABIResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contractregistry.GetContractABIResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contractregistry.GetContractABIResponse.displayName = 'proto.contractregistry.GetContractABIResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contractregistry.GetContractBytecodeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contractregistry.GetContractBytecodeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contractregistry.GetContractBytecodeResponse.displayName = 'proto.contractregistry.GetContractBytecodeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contractregistry.GetContractDeployedBytecodeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contractregistry.GetContractDeployedBytecodeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contractregistry.GetContractDeployedBytecodeResponse.displayName = 'proto.contractregistry.GetContractDeployedBytecodeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contractregistry.GetCatalogRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contractregistry.GetCatalogRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contractregistry.GetCatalogRequest.displayName = 'proto.contractregistry.GetCatalogRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contractregistry.GetCatalogResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.contractregistry.GetCatalogResponse.repeatedFields_, null);
};
goog.inherits(proto.contractregistry.GetCatalogResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contractregistry.GetCatalogResponse.displayName = 'proto.contractregistry.GetCatalogResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contractregistry.GetTagsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contractregistry.GetTagsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contractregistry.GetTagsRequest.displayName = 'proto.contractregistry.GetTagsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contractregistry.GetTagsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.contractregistry.GetTagsResponse.repeatedFields_, null);
};
goog.inherits(proto.contractregistry.GetTagsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contractregistry.GetTagsResponse.displayName = 'proto.contractregistry.GetTagsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contractregistry.GetMethodsBySelectorRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contractregistry.GetMethodsBySelectorRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contractregistry.GetMethodsBySelectorRequest.displayName = 'proto.contractregistry.GetMethodsBySelectorRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contractregistry.GetMethodsBySelectorResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.contractregistry.GetMethodsBySelectorResponse.repeatedFields_, null);
};
goog.inherits(proto.contractregistry.GetMethodsBySelectorResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contractregistry.GetMethodsBySelectorResponse.displayName = 'proto.contractregistry.GetMethodsBySelectorResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contractregistry.GetEventsBySigHashRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contractregistry.GetEventsBySigHashRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contractregistry.GetEventsBySigHashRequest.displayName = 'proto.contractregistry.GetEventsBySigHashRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contractregistry.GetEventsBySigHashResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.contractregistry.GetEventsBySigHashResponse.repeatedFields_, null);
};
goog.inherits(proto.contractregistry.GetEventsBySigHashResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contractregistry.GetEventsBySigHashResponse.displayName = 'proto.contractregistry.GetEventsBySigHashResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contractregistry.SetAccountCodeHashRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contractregistry.SetAccountCodeHashRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contractregistry.SetAccountCodeHashRequest.displayName = 'proto.contractregistry.SetAccountCodeHashRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contractregistry.SetAccountCodeHashResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contractregistry.SetAccountCodeHashResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contractregistry.SetAccountCodeHashResponse.displayName = 'proto.contractregistry.SetAccountCodeHashResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contractregistry.RegisterContractRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.contractregistry.RegisterContractRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contractregistry.RegisterContractRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contractregistry.RegisterContractRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    contract: (f = msg.getContract()) && types_abi_abi_pb.Contract.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contractregistry.RegisterContractRequest}
 */
proto.contractregistry.RegisterContractRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contractregistry.RegisterContractRequest;
  return proto.contractregistry.RegisterContractRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contractregistry.RegisterContractRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contractregistry.RegisterContractRequest}
 */
proto.contractregistry.RegisterContractRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new types_abi_abi_pb.Contract;
      reader.readMessage(value,types_abi_abi_pb.Contract.deserializeBinaryFromReader);
      msg.setContract(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contractregistry.RegisterContractRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contractregistry.RegisterContractRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contractregistry.RegisterContractRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contractregistry.RegisterContractRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContract();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      types_abi_abi_pb.Contract.serializeBinaryToWriter
    );
  }
};


/**
 * optional abi.Contract contract = 1;
 * @return {?proto.abi.Contract}
 */
proto.contractregistry.RegisterContractRequest.prototype.getContract = function() {
  return /** @type{?proto.abi.Contract} */ (
    jspb.Message.getWrapperField(this, types_abi_abi_pb.Contract, 1));
};


/**
 * @param {?proto.abi.Contract|undefined} value
 * @return {!proto.contractregistry.RegisterContractRequest} returns this
*/
proto.contractregistry.RegisterContractRequest.prototype.setContract = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contractregistry.RegisterContractRequest} returns this
 */
proto.contractregistry.RegisterContractRequest.prototype.clearContract = function() {
  return this.setContract(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contractregistry.RegisterContractRequest.prototype.hasContract = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contractregistry.RegisterContractResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.contractregistry.RegisterContractResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contractregistry.RegisterContractResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contractregistry.RegisterContractResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contractregistry.RegisterContractResponse}
 */
proto.contractregistry.RegisterContractResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contractregistry.RegisterContractResponse;
  return proto.contractregistry.RegisterContractResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contractregistry.RegisterContractResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contractregistry.RegisterContractResponse}
 */
proto.contractregistry.RegisterContractResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contractregistry.RegisterContractResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contractregistry.RegisterContractResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contractregistry.RegisterContractResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contractregistry.RegisterContractResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contractregistry.DeregisterContractRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.contractregistry.DeregisterContractRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contractregistry.DeregisterContractRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contractregistry.DeregisterContractRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractid: (f = msg.getContractid()) && types_abi_abi_pb.ContractId.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contractregistry.DeregisterContractRequest}
 */
proto.contractregistry.DeregisterContractRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contractregistry.DeregisterContractRequest;
  return proto.contractregistry.DeregisterContractRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contractregistry.DeregisterContractRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contractregistry.DeregisterContractRequest}
 */
proto.contractregistry.DeregisterContractRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new types_abi_abi_pb.ContractId;
      reader.readMessage(value,types_abi_abi_pb.ContractId.deserializeBinaryFromReader);
      msg.setContractid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contractregistry.DeregisterContractRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contractregistry.DeregisterContractRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contractregistry.DeregisterContractRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contractregistry.DeregisterContractRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      types_abi_abi_pb.ContractId.serializeBinaryToWriter
    );
  }
};


/**
 * optional abi.ContractId contractId = 1;
 * @return {?proto.abi.ContractId}
 */
proto.contractregistry.DeregisterContractRequest.prototype.getContractid = function() {
  return /** @type{?proto.abi.ContractId} */ (
    jspb.Message.getWrapperField(this, types_abi_abi_pb.ContractId, 1));
};


/**
 * @param {?proto.abi.ContractId|undefined} value
 * @return {!proto.contractregistry.DeregisterContractRequest} returns this
*/
proto.contractregistry.DeregisterContractRequest.prototype.setContractid = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contractregistry.DeregisterContractRequest} returns this
 */
proto.contractregistry.DeregisterContractRequest.prototype.clearContractid = function() {
  return this.setContractid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contractregistry.DeregisterContractRequest.prototype.hasContractid = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contractregistry.DeregisterContractResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.contractregistry.DeregisterContractResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contractregistry.DeregisterContractResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contractregistry.DeregisterContractResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contractregistry.DeregisterContractResponse}
 */
proto.contractregistry.DeregisterContractResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contractregistry.DeregisterContractResponse;
  return proto.contractregistry.DeregisterContractResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contractregistry.DeregisterContractResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contractregistry.DeregisterContractResponse}
 */
proto.contractregistry.DeregisterContractResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contractregistry.DeregisterContractResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contractregistry.DeregisterContractResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contractregistry.DeregisterContractResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contractregistry.DeregisterContractResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contractregistry.DeleteArtifactRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.contractregistry.DeleteArtifactRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contractregistry.DeleteArtifactRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contractregistry.DeleteArtifactRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    bytecodehash: msg.getBytecodehash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contractregistry.DeleteArtifactRequest}
 */
proto.contractregistry.DeleteArtifactRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contractregistry.DeleteArtifactRequest;
  return proto.contractregistry.DeleteArtifactRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contractregistry.DeleteArtifactRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contractregistry.DeleteArtifactRequest}
 */
proto.contractregistry.DeleteArtifactRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBytecodehash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contractregistry.DeleteArtifactRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contractregistry.DeleteArtifactRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contractregistry.DeleteArtifactRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contractregistry.DeleteArtifactRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBytecodehash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes bytecodeHash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.contractregistry.DeleteArtifactRequest.prototype.getBytecodehash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes bytecodeHash = 1;
 * This is a type-conversion wrapper around `getBytecodehash()`
 * @return {string}
 */
proto.contractregistry.DeleteArtifactRequest.prototype.getBytecodehash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBytecodehash()));
};


/**
 * optional bytes bytecodeHash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBytecodehash()`
 * @return {!Uint8Array}
 */
proto.contractregistry.DeleteArtifactRequest.prototype.getBytecodehash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBytecodehash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.contractregistry.DeleteArtifactRequest} returns this
 */
proto.contractregistry.DeleteArtifactRequest.prototype.setBytecodehash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contractregistry.DeleteArtifactResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.contractregistry.DeleteArtifactResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contractregistry.DeleteArtifactResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contractregistry.DeleteArtifactResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contractregistry.DeleteArtifactResponse}
 */
proto.contractregistry.DeleteArtifactResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contractregistry.DeleteArtifactResponse;
  return proto.contractregistry.DeleteArtifactResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contractregistry.DeleteArtifactResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contractregistry.DeleteArtifactResponse}
 */
proto.contractregistry.DeleteArtifactResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contractregistry.DeleteArtifactResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contractregistry.DeleteArtifactResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contractregistry.DeleteArtifactResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contractregistry.DeleteArtifactResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contractregistry.GetContractRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.contractregistry.GetContractRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contractregistry.GetContractRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contractregistry.GetContractRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractid: (f = msg.getContractid()) && types_abi_abi_pb.ContractId.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contractregistry.GetContractRequest}
 */
proto.contractregistry.GetContractRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contractregistry.GetContractRequest;
  return proto.contractregistry.GetContractRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contractregistry.GetContractRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contractregistry.GetContractRequest}
 */
proto.contractregistry.GetContractRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new types_abi_abi_pb.ContractId;
      reader.readMessage(value,types_abi_abi_pb.ContractId.deserializeBinaryFromReader);
      msg.setContractid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contractregistry.GetContractRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contractregistry.GetContractRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contractregistry.GetContractRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contractregistry.GetContractRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      types_abi_abi_pb.ContractId.serializeBinaryToWriter
    );
  }
};


/**
 * optional abi.ContractId contractId = 1;
 * @return {?proto.abi.ContractId}
 */
proto.contractregistry.GetContractRequest.prototype.getContractid = function() {
  return /** @type{?proto.abi.ContractId} */ (
    jspb.Message.getWrapperField(this, types_abi_abi_pb.ContractId, 1));
};


/**
 * @param {?proto.abi.ContractId|undefined} value
 * @return {!proto.contractregistry.GetContractRequest} returns this
*/
proto.contractregistry.GetContractRequest.prototype.setContractid = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contractregistry.GetContractRequest} returns this
 */
proto.contractregistry.GetContractRequest.prototype.clearContractid = function() {
  return this.setContractid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contractregistry.GetContractRequest.prototype.hasContractid = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contractregistry.GetContractResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.contractregistry.GetContractResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contractregistry.GetContractResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contractregistry.GetContractResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    contract: (f = msg.getContract()) && types_abi_abi_pb.Contract.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contractregistry.GetContractResponse}
 */
proto.contractregistry.GetContractResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contractregistry.GetContractResponse;
  return proto.contractregistry.GetContractResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contractregistry.GetContractResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contractregistry.GetContractResponse}
 */
proto.contractregistry.GetContractResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new types_abi_abi_pb.Contract;
      reader.readMessage(value,types_abi_abi_pb.Contract.deserializeBinaryFromReader);
      msg.setContract(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contractregistry.GetContractResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contractregistry.GetContractResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contractregistry.GetContractResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contractregistry.GetContractResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContract();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      types_abi_abi_pb.Contract.serializeBinaryToWriter
    );
  }
};


/**
 * optional abi.Contract contract = 1;
 * @return {?proto.abi.Contract}
 */
proto.contractregistry.GetContractResponse.prototype.getContract = function() {
  return /** @type{?proto.abi.Contract} */ (
    jspb.Message.getWrapperField(this, types_abi_abi_pb.Contract, 1));
};


/**
 * @param {?proto.abi.Contract|undefined} value
 * @return {!proto.contractregistry.GetContractResponse} returns this
*/
proto.contractregistry.GetContractResponse.prototype.setContract = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contractregistry.GetContractResponse} returns this
 */
proto.contractregistry.GetContractResponse.prototype.clearContract = function() {
  return this.setContract(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contractregistry.GetContractResponse.prototype.hasContract = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contractregistry.GetContractABIResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.contractregistry.GetContractABIResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contractregistry.GetContractABIResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contractregistry.GetContractABIResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    abi: msg.getAbi_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contractregistry.GetContractABIResponse}
 */
proto.contractregistry.GetContractABIResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contractregistry.GetContractABIResponse;
  return proto.contractregistry.GetContractABIResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contractregistry.GetContractABIResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contractregistry.GetContractABIResponse}
 */
proto.contractregistry.GetContractABIResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAbi(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contractregistry.GetContractABIResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contractregistry.GetContractABIResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contractregistry.GetContractABIResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contractregistry.GetContractABIResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAbi_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes abi = 1;
 * @return {!(string|Uint8Array)}
 */
proto.contractregistry.GetContractABIResponse.prototype.getAbi = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes abi = 1;
 * This is a type-conversion wrapper around `getAbi()`
 * @return {string}
 */
proto.contractregistry.GetContractABIResponse.prototype.getAbi_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAbi()));
};


/**
 * optional bytes abi = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAbi()`
 * @return {!Uint8Array}
 */
proto.contractregistry.GetContractABIResponse.prototype.getAbi_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAbi()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.contractregistry.GetContractABIResponse} returns this
 */
proto.contractregistry.GetContractABIResponse.prototype.setAbi = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contractregistry.GetContractBytecodeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.contractregistry.GetContractBytecodeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contractregistry.GetContractBytecodeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contractregistry.GetContractBytecodeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    bytecode: msg.getBytecode_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contractregistry.GetContractBytecodeResponse}
 */
proto.contractregistry.GetContractBytecodeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contractregistry.GetContractBytecodeResponse;
  return proto.contractregistry.GetContractBytecodeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contractregistry.GetContractBytecodeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contractregistry.GetContractBytecodeResponse}
 */
proto.contractregistry.GetContractBytecodeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBytecode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contractregistry.GetContractBytecodeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contractregistry.GetContractBytecodeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contractregistry.GetContractBytecodeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contractregistry.GetContractBytecodeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBytecode_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes bytecode = 1;
 * @return {!(string|Uint8Array)}
 */
proto.contractregistry.GetContractBytecodeResponse.prototype.getBytecode = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes bytecode = 1;
 * This is a type-conversion wrapper around `getBytecode()`
 * @return {string}
 */
proto.contractregistry.GetContractBytecodeResponse.prototype.getBytecode_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBytecode()));
};


/**
 * optional bytes bytecode = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBytecode()`
 * @return {!Uint8Array}
 */
proto.contractregistry.GetContractBytecodeResponse.prototype.getBytecode_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBytecode()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.contractregistry.GetContractBytecodeResponse} returns this
 */
proto.contractregistry.GetContractBytecodeResponse.prototype.setBytecode = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contractregistry.GetContractDeployedBytecodeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.contractregistry.GetContractDeployedBytecodeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contractregistry.GetContractDeployedBytecodeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contractregistry.GetContractDeployedBytecodeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    deployedbytecode: msg.getDeployedbytecode_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contractregistry.GetContractDeployedBytecodeResponse}
 */
proto.contractregistry.GetContractDeployedBytecodeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contractregistry.GetContractDeployedBytecodeResponse;
  return proto.contractregistry.GetContractDeployedBytecodeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contractregistry.GetContractDeployedBytecodeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contractregistry.GetContractDeployedBytecodeResponse}
 */
proto.contractregistry.GetContractDeployedBytecodeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDeployedbytecode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contractregistry.GetContractDeployedBytecodeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contractregistry.GetContractDeployedBytecodeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contractregistry.GetContractDeployedBytecodeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contractregistry.GetContractDeployedBytecodeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeployedbytecode_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes deployedBytecode = 1;
 * @return {!(string|Uint8Array)}
 */
proto.contractregistry.GetContractDeployedBytecodeResponse.prototype.getDeployedbytecode = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes deployedBytecode = 1;
 * This is a type-conversion wrapper around `getDeployedbytecode()`
 * @return {string}
 */
proto.contractregistry.GetContractDeployedBytecodeResponse.prototype.getDeployedbytecode_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDeployedbytecode()));
};


/**
 * optional bytes deployedBytecode = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDeployedbytecode()`
 * @return {!Uint8Array}
 */
proto.contractregistry.GetContractDeployedBytecodeResponse.prototype.getDeployedbytecode_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDeployedbytecode()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.contractregistry.GetContractDeployedBytecodeResponse} returns this
 */
proto.contractregistry.GetContractDeployedBytecodeResponse.prototype.setDeployedbytecode = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contractregistry.GetCatalogRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.contractregistry.GetCatalogRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contractregistry.GetCatalogRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contractregistry.GetCatalogRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contractregistry.GetCatalogRequest}
 */
proto.contractregistry.GetCatalogRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contractregistry.GetCatalogRequest;
  return proto.contractregistry.GetCatalogRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contractregistry.GetCatalogRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contractregistry.GetCatalogRequest}
 */
proto.contractregistry.GetCatalogRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contractregistry.GetCatalogRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contractregistry.GetCatalogRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contractregistry.GetCatalogRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contractregistry.GetCatalogRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.contractregistry.GetCatalogResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contractregistry.GetCatalogResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.contractregistry.GetCatalogResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contractregistry.GetCatalogResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contractregistry.GetCatalogResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    namesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contractregistry.GetCatalogResponse}
 */
proto.contractregistry.GetCatalogResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contractregistry.GetCatalogResponse;
  return proto.contractregistry.GetCatalogResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contractregistry.GetCatalogResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contractregistry.GetCatalogResponse}
 */
proto.contractregistry.GetCatalogResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addNames(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contractregistry.GetCatalogResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contractregistry.GetCatalogResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contractregistry.GetCatalogResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contractregistry.GetCatalogResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string names = 1;
 * @return {!Array<string>}
 */
proto.contractregistry.GetCatalogResponse.prototype.getNamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.contractregistry.GetCatalogResponse} returns this
 */
proto.contractregistry.GetCatalogResponse.prototype.setNamesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.contractregistry.GetCatalogResponse} returns this
 */
proto.contractregistry.GetCatalogResponse.prototype.addNames = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contractregistry.GetCatalogResponse} returns this
 */
proto.contractregistry.GetCatalogResponse.prototype.clearNamesList = function() {
  return this.setNamesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contractregistry.GetTagsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.contractregistry.GetTagsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contractregistry.GetTagsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contractregistry.GetTagsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contractregistry.GetTagsRequest}
 */
proto.contractregistry.GetTagsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contractregistry.GetTagsRequest;
  return proto.contractregistry.GetTagsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contractregistry.GetTagsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contractregistry.GetTagsRequest}
 */
proto.contractregistry.GetTagsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contractregistry.GetTagsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contractregistry.GetTagsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contractregistry.GetTagsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contractregistry.GetTagsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.contractregistry.GetTagsRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contractregistry.GetTagsRequest} returns this
 */
proto.contractregistry.GetTagsRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.contractregistry.GetTagsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contractregistry.GetTagsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.contractregistry.GetTagsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contractregistry.GetTagsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contractregistry.GetTagsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    tagsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contractregistry.GetTagsResponse}
 */
proto.contractregistry.GetTagsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contractregistry.GetTagsResponse;
  return proto.contractregistry.GetTagsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contractregistry.GetTagsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contractregistry.GetTagsResponse}
 */
proto.contractregistry.GetTagsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addTags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contractregistry.GetTagsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contractregistry.GetTagsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contractregistry.GetTagsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contractregistry.GetTagsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string tags = 1;
 * @return {!Array<string>}
 */
proto.contractregistry.GetTagsResponse.prototype.getTagsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.contractregistry.GetTagsResponse} returns this
 */
proto.contractregistry.GetTagsResponse.prototype.setTagsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.contractregistry.GetTagsResponse} returns this
 */
proto.contractregistry.GetTagsResponse.prototype.addTags = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contractregistry.GetTagsResponse} returns this
 */
proto.contractregistry.GetTagsResponse.prototype.clearTagsList = function() {
  return this.setTagsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contractregistry.GetMethodsBySelectorRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.contractregistry.GetMethodsBySelectorRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contractregistry.GetMethodsBySelectorRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contractregistry.GetMethodsBySelectorRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    selector: msg.getSelector_asB64(),
    accountinstance: (f = msg.getAccountinstance()) && types_common_account_instance_pb.AccountInstance.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contractregistry.GetMethodsBySelectorRequest}
 */
proto.contractregistry.GetMethodsBySelectorRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contractregistry.GetMethodsBySelectorRequest;
  return proto.contractregistry.GetMethodsBySelectorRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contractregistry.GetMethodsBySelectorRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contractregistry.GetMethodsBySelectorRequest}
 */
proto.contractregistry.GetMethodsBySelectorRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSelector(value);
      break;
    case 2:
      var value = new types_common_account_instance_pb.AccountInstance;
      reader.readMessage(value,types_common_account_instance_pb.AccountInstance.deserializeBinaryFromReader);
      msg.setAccountinstance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contractregistry.GetMethodsBySelectorRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contractregistry.GetMethodsBySelectorRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contractregistry.GetMethodsBySelectorRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contractregistry.GetMethodsBySelectorRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSelector_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAccountinstance();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      types_common_account_instance_pb.AccountInstance.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes selector = 1;
 * @return {!(string|Uint8Array)}
 */
proto.contractregistry.GetMethodsBySelectorRequest.prototype.getSelector = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes selector = 1;
 * This is a type-conversion wrapper around `getSelector()`
 * @return {string}
 */
proto.contractregistry.GetMethodsBySelectorRequest.prototype.getSelector_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSelector()));
};


/**
 * optional bytes selector = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSelector()`
 * @return {!Uint8Array}
 */
proto.contractregistry.GetMethodsBySelectorRequest.prototype.getSelector_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSelector()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.contractregistry.GetMethodsBySelectorRequest} returns this
 */
proto.contractregistry.GetMethodsBySelectorRequest.prototype.setSelector = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional common.AccountInstance accountInstance = 2;
 * @return {?proto.common.AccountInstance}
 */
proto.contractregistry.GetMethodsBySelectorRequest.prototype.getAccountinstance = function() {
  return /** @type{?proto.common.AccountInstance} */ (
    jspb.Message.getWrapperField(this, types_common_account_instance_pb.AccountInstance, 2));
};


/**
 * @param {?proto.common.AccountInstance|undefined} value
 * @return {!proto.contractregistry.GetMethodsBySelectorRequest} returns this
*/
proto.contractregistry.GetMethodsBySelectorRequest.prototype.setAccountinstance = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contractregistry.GetMethodsBySelectorRequest} returns this
 */
proto.contractregistry.GetMethodsBySelectorRequest.prototype.clearAccountinstance = function() {
  return this.setAccountinstance(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contractregistry.GetMethodsBySelectorRequest.prototype.hasAccountinstance = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.contractregistry.GetMethodsBySelectorResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contractregistry.GetMethodsBySelectorResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.contractregistry.GetMethodsBySelectorResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contractregistry.GetMethodsBySelectorResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contractregistry.GetMethodsBySelectorResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    method: msg.getMethod_asB64(),
    defaultmethodsList: msg.getDefaultmethodsList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contractregistry.GetMethodsBySelectorResponse}
 */
proto.contractregistry.GetMethodsBySelectorResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contractregistry.GetMethodsBySelectorResponse;
  return proto.contractregistry.GetMethodsBySelectorResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contractregistry.GetMethodsBySelectorResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contractregistry.GetMethodsBySelectorResponse}
 */
proto.contractregistry.GetMethodsBySelectorResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMethod(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addDefaultmethods(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contractregistry.GetMethodsBySelectorResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contractregistry.GetMethodsBySelectorResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contractregistry.GetMethodsBySelectorResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contractregistry.GetMethodsBySelectorResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMethod_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getDefaultmethodsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes method = 1;
 * @return {!(string|Uint8Array)}
 */
proto.contractregistry.GetMethodsBySelectorResponse.prototype.getMethod = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes method = 1;
 * This is a type-conversion wrapper around `getMethod()`
 * @return {string}
 */
proto.contractregistry.GetMethodsBySelectorResponse.prototype.getMethod_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMethod()));
};


/**
 * optional bytes method = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMethod()`
 * @return {!Uint8Array}
 */
proto.contractregistry.GetMethodsBySelectorResponse.prototype.getMethod_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMethod()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.contractregistry.GetMethodsBySelectorResponse} returns this
 */
proto.contractregistry.GetMethodsBySelectorResponse.prototype.setMethod = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated bytes defaultMethods = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.contractregistry.GetMethodsBySelectorResponse.prototype.getDefaultmethodsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes defaultMethods = 2;
 * This is a type-conversion wrapper around `getDefaultmethodsList()`
 * @return {!Array<string>}
 */
proto.contractregistry.GetMethodsBySelectorResponse.prototype.getDefaultmethodsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getDefaultmethodsList()));
};


/**
 * repeated bytes defaultMethods = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDefaultmethodsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.contractregistry.GetMethodsBySelectorResponse.prototype.getDefaultmethodsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getDefaultmethodsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.contractregistry.GetMethodsBySelectorResponse} returns this
 */
proto.contractregistry.GetMethodsBySelectorResponse.prototype.setDefaultmethodsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.contractregistry.GetMethodsBySelectorResponse} returns this
 */
proto.contractregistry.GetMethodsBySelectorResponse.prototype.addDefaultmethods = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contractregistry.GetMethodsBySelectorResponse} returns this
 */
proto.contractregistry.GetMethodsBySelectorResponse.prototype.clearDefaultmethodsList = function() {
  return this.setDefaultmethodsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contractregistry.GetEventsBySigHashRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.contractregistry.GetEventsBySigHashRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contractregistry.GetEventsBySigHashRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contractregistry.GetEventsBySigHashRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sighash: msg.getSighash_asB64(),
    accountinstance: (f = msg.getAccountinstance()) && types_common_account_instance_pb.AccountInstance.toObject(includeInstance, f),
    indexedinputcount: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contractregistry.GetEventsBySigHashRequest}
 */
proto.contractregistry.GetEventsBySigHashRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contractregistry.GetEventsBySigHashRequest;
  return proto.contractregistry.GetEventsBySigHashRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contractregistry.GetEventsBySigHashRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contractregistry.GetEventsBySigHashRequest}
 */
proto.contractregistry.GetEventsBySigHashRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSighash(value);
      break;
    case 2:
      var value = new types_common_account_instance_pb.AccountInstance;
      reader.readMessage(value,types_common_account_instance_pb.AccountInstance.deserializeBinaryFromReader);
      msg.setAccountinstance(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndexedinputcount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contractregistry.GetEventsBySigHashRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contractregistry.GetEventsBySigHashRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contractregistry.GetEventsBySigHashRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contractregistry.GetEventsBySigHashRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSighash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAccountinstance();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      types_common_account_instance_pb.AccountInstance.serializeBinaryToWriter
    );
  }
  f = message.getIndexedinputcount();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional bytes sigHash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.contractregistry.GetEventsBySigHashRequest.prototype.getSighash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes sigHash = 1;
 * This is a type-conversion wrapper around `getSighash()`
 * @return {string}
 */
proto.contractregistry.GetEventsBySigHashRequest.prototype.getSighash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSighash()));
};


/**
 * optional bytes sigHash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSighash()`
 * @return {!Uint8Array}
 */
proto.contractregistry.GetEventsBySigHashRequest.prototype.getSighash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSighash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.contractregistry.GetEventsBySigHashRequest} returns this
 */
proto.contractregistry.GetEventsBySigHashRequest.prototype.setSighash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional common.AccountInstance accountInstance = 2;
 * @return {?proto.common.AccountInstance}
 */
proto.contractregistry.GetEventsBySigHashRequest.prototype.getAccountinstance = function() {
  return /** @type{?proto.common.AccountInstance} */ (
    jspb.Message.getWrapperField(this, types_common_account_instance_pb.AccountInstance, 2));
};


/**
 * @param {?proto.common.AccountInstance|undefined} value
 * @return {!proto.contractregistry.GetEventsBySigHashRequest} returns this
*/
proto.contractregistry.GetEventsBySigHashRequest.prototype.setAccountinstance = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contractregistry.GetEventsBySigHashRequest} returns this
 */
proto.contractregistry.GetEventsBySigHashRequest.prototype.clearAccountinstance = function() {
  return this.setAccountinstance(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contractregistry.GetEventsBySigHashRequest.prototype.hasAccountinstance = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 indexedInputCount = 3;
 * @return {number}
 */
proto.contractregistry.GetEventsBySigHashRequest.prototype.getIndexedinputcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.contractregistry.GetEventsBySigHashRequest} returns this
 */
proto.contractregistry.GetEventsBySigHashRequest.prototype.setIndexedinputcount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.contractregistry.GetEventsBySigHashResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contractregistry.GetEventsBySigHashResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.contractregistry.GetEventsBySigHashResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contractregistry.GetEventsBySigHashResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contractregistry.GetEventsBySigHashResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    event: msg.getEvent_asB64(),
    defaulteventsList: msg.getDefaulteventsList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contractregistry.GetEventsBySigHashResponse}
 */
proto.contractregistry.GetEventsBySigHashResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contractregistry.GetEventsBySigHashResponse;
  return proto.contractregistry.GetEventsBySigHashResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contractregistry.GetEventsBySigHashResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contractregistry.GetEventsBySigHashResponse}
 */
proto.contractregistry.GetEventsBySigHashResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEvent(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addDefaultevents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contractregistry.GetEventsBySigHashResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contractregistry.GetEventsBySigHashResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contractregistry.GetEventsBySigHashResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contractregistry.GetEventsBySigHashResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEvent_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getDefaulteventsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes event = 1;
 * @return {!(string|Uint8Array)}
 */
proto.contractregistry.GetEventsBySigHashResponse.prototype.getEvent = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes event = 1;
 * This is a type-conversion wrapper around `getEvent()`
 * @return {string}
 */
proto.contractregistry.GetEventsBySigHashResponse.prototype.getEvent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEvent()));
};


/**
 * optional bytes event = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEvent()`
 * @return {!Uint8Array}
 */
proto.contractregistry.GetEventsBySigHashResponse.prototype.getEvent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEvent()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.contractregistry.GetEventsBySigHashResponse} returns this
 */
proto.contractregistry.GetEventsBySigHashResponse.prototype.setEvent = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated bytes defaultEvents = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.contractregistry.GetEventsBySigHashResponse.prototype.getDefaulteventsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes defaultEvents = 2;
 * This is a type-conversion wrapper around `getDefaulteventsList()`
 * @return {!Array<string>}
 */
proto.contractregistry.GetEventsBySigHashResponse.prototype.getDefaulteventsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getDefaulteventsList()));
};


/**
 * repeated bytes defaultEvents = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDefaulteventsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.contractregistry.GetEventsBySigHashResponse.prototype.getDefaulteventsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getDefaulteventsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.contractregistry.GetEventsBySigHashResponse} returns this
 */
proto.contractregistry.GetEventsBySigHashResponse.prototype.setDefaulteventsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.contractregistry.GetEventsBySigHashResponse} returns this
 */
proto.contractregistry.GetEventsBySigHashResponse.prototype.addDefaultevents = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contractregistry.GetEventsBySigHashResponse} returns this
 */
proto.contractregistry.GetEventsBySigHashResponse.prototype.clearDefaulteventsList = function() {
  return this.setDefaulteventsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contractregistry.SetAccountCodeHashRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.contractregistry.SetAccountCodeHashRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contractregistry.SetAccountCodeHashRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contractregistry.SetAccountCodeHashRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountinstance: (f = msg.getAccountinstance()) && types_common_account_instance_pb.AccountInstance.toObject(includeInstance, f),
    codehash: msg.getCodehash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contractregistry.SetAccountCodeHashRequest}
 */
proto.contractregistry.SetAccountCodeHashRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contractregistry.SetAccountCodeHashRequest;
  return proto.contractregistry.SetAccountCodeHashRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contractregistry.SetAccountCodeHashRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contractregistry.SetAccountCodeHashRequest}
 */
proto.contractregistry.SetAccountCodeHashRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new types_common_account_instance_pb.AccountInstance;
      reader.readMessage(value,types_common_account_instance_pb.AccountInstance.deserializeBinaryFromReader);
      msg.setAccountinstance(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCodehash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contractregistry.SetAccountCodeHashRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contractregistry.SetAccountCodeHashRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contractregistry.SetAccountCodeHashRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contractregistry.SetAccountCodeHashRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountinstance();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      types_common_account_instance_pb.AccountInstance.serializeBinaryToWriter
    );
  }
  f = message.getCodehash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional common.AccountInstance accountInstance = 1;
 * @return {?proto.common.AccountInstance}
 */
proto.contractregistry.SetAccountCodeHashRequest.prototype.getAccountinstance = function() {
  return /** @type{?proto.common.AccountInstance} */ (
    jspb.Message.getWrapperField(this, types_common_account_instance_pb.AccountInstance, 1));
};


/**
 * @param {?proto.common.AccountInstance|undefined} value
 * @return {!proto.contractregistry.SetAccountCodeHashRequest} returns this
*/
proto.contractregistry.SetAccountCodeHashRequest.prototype.setAccountinstance = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contractregistry.SetAccountCodeHashRequest} returns this
 */
proto.contractregistry.SetAccountCodeHashRequest.prototype.clearAccountinstance = function() {
  return this.setAccountinstance(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contractregistry.SetAccountCodeHashRequest.prototype.hasAccountinstance = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes codeHash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.contractregistry.SetAccountCodeHashRequest.prototype.getCodehash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes codeHash = 2;
 * This is a type-conversion wrapper around `getCodehash()`
 * @return {string}
 */
proto.contractregistry.SetAccountCodeHashRequest.prototype.getCodehash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCodehash()));
};


/**
 * optional bytes codeHash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCodehash()`
 * @return {!Uint8Array}
 */
proto.contractregistry.SetAccountCodeHashRequest.prototype.getCodehash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCodehash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.contractregistry.SetAccountCodeHashRequest} returns this
 */
proto.contractregistry.SetAccountCodeHashRequest.prototype.setCodehash = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contractregistry.SetAccountCodeHashResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.contractregistry.SetAccountCodeHashResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contractregistry.SetAccountCodeHashResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contractregistry.SetAccountCodeHashResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contractregistry.SetAccountCodeHashResponse}
 */
proto.contractregistry.SetAccountCodeHashResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contractregistry.SetAccountCodeHashResponse;
  return proto.contractregistry.SetAccountCodeHashResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contractregistry.SetAccountCodeHashResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contractregistry.SetAccountCodeHashResponse}
 */
proto.contractregistry.SetAccountCodeHashResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contractregistry.SetAccountCodeHashResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contractregistry.SetAccountCodeHashResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contractregistry.SetAccountCodeHashResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contractregistry.SetAccountCodeHashResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.contractregistry);
