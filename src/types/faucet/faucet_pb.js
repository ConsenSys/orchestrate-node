// source: types/faucet/faucet.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var types_error_error_pb = require('../../types/error/error_pb.js');
goog.object.extend(proto, types_error_error_pb);
var types_ethereum_base_pb = require('../../types/ethereum/base_pb.js');
goog.object.extend(proto, types_ethereum_base_pb);
var types_chain_chain_pb = require('../../types/chain/chain_pb.js');
goog.object.extend(proto, types_chain_chain_pb);
goog.exportSymbol('proto.faucet.CreditRequest', null, global);
goog.exportSymbol('proto.faucet.CreditResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.faucet.CreditRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.faucet.CreditRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.faucet.CreditRequest.displayName = 'proto.faucet.CreditRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.faucet.CreditResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.faucet.CreditResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.faucet.CreditResponse.displayName = 'proto.faucet.CreditResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.faucet.CreditRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.faucet.CreditRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.faucet.CreditRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.faucet.CreditRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    chain: (f = msg.getChain()) && types_chain_chain_pb.Chain.toObject(includeInstance, f),
    beneficiary: (f = msg.getBeneficiary()) && types_ethereum_base_pb.Account.toObject(includeInstance, f),
    creditor: (f = msg.getCreditor()) && types_ethereum_base_pb.Account.toObject(includeInstance, f),
    amount: (f = msg.getAmount()) && types_ethereum_base_pb.Quantity.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.faucet.CreditRequest}
 */
proto.faucet.CreditRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.faucet.CreditRequest;
  return proto.faucet.CreditRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.faucet.CreditRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.faucet.CreditRequest}
 */
proto.faucet.CreditRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new types_chain_chain_pb.Chain;
      reader.readMessage(value,types_chain_chain_pb.Chain.deserializeBinaryFromReader);
      msg.setChain(value);
      break;
    case 2:
      var value = new types_ethereum_base_pb.Account;
      reader.readMessage(value,types_ethereum_base_pb.Account.deserializeBinaryFromReader);
      msg.setBeneficiary(value);
      break;
    case 3:
      var value = new types_ethereum_base_pb.Account;
      reader.readMessage(value,types_ethereum_base_pb.Account.deserializeBinaryFromReader);
      msg.setCreditor(value);
      break;
    case 4:
      var value = new types_ethereum_base_pb.Quantity;
      reader.readMessage(value,types_ethereum_base_pb.Quantity.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.faucet.CreditRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.faucet.CreditRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.faucet.CreditRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.faucet.CreditRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChain();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      types_chain_chain_pb.Chain.serializeBinaryToWriter
    );
  }
  f = message.getBeneficiary();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      types_ethereum_base_pb.Account.serializeBinaryToWriter
    );
  }
  f = message.getCreditor();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      types_ethereum_base_pb.Account.serializeBinaryToWriter
    );
  }
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      types_ethereum_base_pb.Quantity.serializeBinaryToWriter
    );
  }
};


/**
 * optional chain.Chain chain = 1;
 * @return {?proto.chain.Chain}
 */
proto.faucet.CreditRequest.prototype.getChain = function() {
  return /** @type{?proto.chain.Chain} */ (
    jspb.Message.getWrapperField(this, types_chain_chain_pb.Chain, 1));
};


/**
 * @param {?proto.chain.Chain|undefined} value
 * @return {!proto.faucet.CreditRequest} returns this
*/
proto.faucet.CreditRequest.prototype.setChain = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.faucet.CreditRequest} returns this
 */
proto.faucet.CreditRequest.prototype.clearChain = function() {
  return this.setChain(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.faucet.CreditRequest.prototype.hasChain = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ethereum.Account beneficiary = 2;
 * @return {?proto.ethereum.Account}
 */
proto.faucet.CreditRequest.prototype.getBeneficiary = function() {
  return /** @type{?proto.ethereum.Account} */ (
    jspb.Message.getWrapperField(this, types_ethereum_base_pb.Account, 2));
};


/**
 * @param {?proto.ethereum.Account|undefined} value
 * @return {!proto.faucet.CreditRequest} returns this
*/
proto.faucet.CreditRequest.prototype.setBeneficiary = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.faucet.CreditRequest} returns this
 */
proto.faucet.CreditRequest.prototype.clearBeneficiary = function() {
  return this.setBeneficiary(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.faucet.CreditRequest.prototype.hasBeneficiary = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ethereum.Account creditor = 3;
 * @return {?proto.ethereum.Account}
 */
proto.faucet.CreditRequest.prototype.getCreditor = function() {
  return /** @type{?proto.ethereum.Account} */ (
    jspb.Message.getWrapperField(this, types_ethereum_base_pb.Account, 3));
};


/**
 * @param {?proto.ethereum.Account|undefined} value
 * @return {!proto.faucet.CreditRequest} returns this
*/
proto.faucet.CreditRequest.prototype.setCreditor = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.faucet.CreditRequest} returns this
 */
proto.faucet.CreditRequest.prototype.clearCreditor = function() {
  return this.setCreditor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.faucet.CreditRequest.prototype.hasCreditor = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ethereum.Quantity amount = 4;
 * @return {?proto.ethereum.Quantity}
 */
proto.faucet.CreditRequest.prototype.getAmount = function() {
  return /** @type{?proto.ethereum.Quantity} */ (
    jspb.Message.getWrapperField(this, types_ethereum_base_pb.Quantity, 4));
};


/**
 * @param {?proto.ethereum.Quantity|undefined} value
 * @return {!proto.faucet.CreditRequest} returns this
*/
proto.faucet.CreditRequest.prototype.setAmount = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.faucet.CreditRequest} returns this
 */
proto.faucet.CreditRequest.prototype.clearAmount = function() {
  return this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.faucet.CreditRequest.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.faucet.CreditResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.faucet.CreditResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.faucet.CreditResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.faucet.CreditResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    creditor: (f = msg.getCreditor()) && types_ethereum_base_pb.Account.toObject(includeInstance, f),
    amount: (f = msg.getAmount()) && types_ethereum_base_pb.Quantity.toObject(includeInstance, f),
    error: (f = msg.getError()) && types_error_error_pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.faucet.CreditResponse}
 */
proto.faucet.CreditResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.faucet.CreditResponse;
  return proto.faucet.CreditResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.faucet.CreditResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.faucet.CreditResponse}
 */
proto.faucet.CreditResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new types_ethereum_base_pb.Account;
      reader.readMessage(value,types_ethereum_base_pb.Account.deserializeBinaryFromReader);
      msg.setCreditor(value);
      break;
    case 2:
      var value = new types_ethereum_base_pb.Quantity;
      reader.readMessage(value,types_ethereum_base_pb.Quantity.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    case 3:
      var value = new types_error_error_pb.Error;
      reader.readMessage(value,types_error_error_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.faucet.CreditResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.faucet.CreditResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.faucet.CreditResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.faucet.CreditResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCreditor();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      types_ethereum_base_pb.Account.serializeBinaryToWriter
    );
  }
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      types_ethereum_base_pb.Quantity.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      types_error_error_pb.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional ethereum.Account creditor = 1;
 * @return {?proto.ethereum.Account}
 */
proto.faucet.CreditResponse.prototype.getCreditor = function() {
  return /** @type{?proto.ethereum.Account} */ (
    jspb.Message.getWrapperField(this, types_ethereum_base_pb.Account, 1));
};


/**
 * @param {?proto.ethereum.Account|undefined} value
 * @return {!proto.faucet.CreditResponse} returns this
*/
proto.faucet.CreditResponse.prototype.setCreditor = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.faucet.CreditResponse} returns this
 */
proto.faucet.CreditResponse.prototype.clearCreditor = function() {
  return this.setCreditor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.faucet.CreditResponse.prototype.hasCreditor = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ethereum.Quantity amount = 2;
 * @return {?proto.ethereum.Quantity}
 */
proto.faucet.CreditResponse.prototype.getAmount = function() {
  return /** @type{?proto.ethereum.Quantity} */ (
    jspb.Message.getWrapperField(this, types_ethereum_base_pb.Quantity, 2));
};


/**
 * @param {?proto.ethereum.Quantity|undefined} value
 * @return {!proto.faucet.CreditResponse} returns this
*/
proto.faucet.CreditResponse.prototype.setAmount = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.faucet.CreditResponse} returns this
 */
proto.faucet.CreditResponse.prototype.clearAmount = function() {
  return this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.faucet.CreditResponse.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional error.Error error = 3;
 * @return {?proto.error.Error}
 */
proto.faucet.CreditResponse.prototype.getError = function() {
  return /** @type{?proto.error.Error} */ (
    jspb.Message.getWrapperField(this, types_error_error_pb.Error, 3));
};


/**
 * @param {?proto.error.Error|undefined} value
 * @return {!proto.faucet.CreditResponse} returns this
*/
proto.faucet.CreditResponse.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.faucet.CreditResponse} returns this
 */
proto.faucet.CreditResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.faucet.CreditResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.faucet);
