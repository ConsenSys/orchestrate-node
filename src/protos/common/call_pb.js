/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var protos_abi_abi_pb = require('../../protos/abi/abi_pb.js');
var protos_quorum_quorum_pb = require('../../protos/quorum/quorum_pb.js');
goog.exportSymbol('proto.common.Call', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.Call = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.common.Call.repeatedFields_, null);
};
goog.inherits(proto.common.Call, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.common.Call.displayName = 'proto.common.Call';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.common.Call.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.Call.prototype.toObject = function(opt_includeInstance) {
  return proto.common.Call.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.Call} msg The msg instance to transform.
 * @return {!Object}
 */
proto.common.Call.toObject = function(includeInstance, msg) {
  var f, obj = {
    contract: (f = msg.getContract()) && protos_abi_abi_pb.Contract.toObject(includeInstance, f),
    method: (f = msg.getMethod()) && protos_abi_abi_pb.Method.toObject(includeInstance, f),
    argsList: jspb.Message.getField(msg, 3),
    quorum: (f = msg.getQuorum()) && protos_quorum_quorum_pb.Quorum.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.Call}
 */
proto.common.Call.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.Call;
  return proto.common.Call.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.Call} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.Call}
 */
proto.common.Call.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new protos_abi_abi_pb.Contract;
      reader.readMessage(value,protos_abi_abi_pb.Contract.deserializeBinaryFromReader);
      msg.setContract(value);
      break;
    case 2:
      var value = new protos_abi_abi_pb.Method;
      reader.readMessage(value,protos_abi_abi_pb.Method.deserializeBinaryFromReader);
      msg.setMethod(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addArgs(value);
      break;
    case 4:
      var value = new protos_quorum_quorum_pb.Quorum;
      reader.readMessage(value,protos_quorum_quorum_pb.Quorum.deserializeBinaryFromReader);
      msg.setQuorum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.Call.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.Call.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.Call} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.common.Call.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContract();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      protos_abi_abi_pb.Contract.serializeBinaryToWriter
    );
  }
  f = message.getMethod();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      protos_abi_abi_pb.Method.serializeBinaryToWriter
    );
  }
  f = message.getArgsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getQuorum();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      protos_quorum_quorum_pb.Quorum.serializeBinaryToWriter
    );
  }
};


/**
 * optional abi.Contract contract = 1;
 * @return {?proto.abi.Contract}
 */
proto.common.Call.prototype.getContract = function() {
  return /** @type{?proto.abi.Contract} */ (
    jspb.Message.getWrapperField(this, protos_abi_abi_pb.Contract, 1));
};


/** @param {?proto.abi.Contract|undefined} value */
proto.common.Call.prototype.setContract = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.common.Call.prototype.clearContract = function() {
  this.setContract(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.common.Call.prototype.hasContract = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional abi.Method method = 2;
 * @return {?proto.abi.Method}
 */
proto.common.Call.prototype.getMethod = function() {
  return /** @type{?proto.abi.Method} */ (
    jspb.Message.getWrapperField(this, protos_abi_abi_pb.Method, 2));
};


/** @param {?proto.abi.Method|undefined} value */
proto.common.Call.prototype.setMethod = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.common.Call.prototype.clearMethod = function() {
  this.setMethod(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.common.Call.prototype.hasMethod = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated string args = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.common.Call.prototype.getArgsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 3));
};


/** @param {!Array.<string>} value */
proto.common.Call.prototype.setArgsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.common.Call.prototype.addArgs = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.common.Call.prototype.clearArgsList = function() {
  this.setArgsList([]);
};


/**
 * optional quorum.Quorum quorum = 4;
 * @return {?proto.quorum.Quorum}
 */
proto.common.Call.prototype.getQuorum = function() {
  return /** @type{?proto.quorum.Quorum} */ (
    jspb.Message.getWrapperField(this, protos_quorum_quorum_pb.Quorum, 4));
};


/** @param {?proto.quorum.Quorum|undefined} value */
proto.common.Call.prototype.setQuorum = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.common.Call.prototype.clearQuorum = function() {
  this.setQuorum(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.common.Call.prototype.hasQuorum = function() {
  return jspb.Message.getField(this, 4) != null;
};


goog.object.extend(exports, proto.common);
